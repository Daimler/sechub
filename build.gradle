// SPDX-License-Identifier: MIT
buildscript{

	apply from: "${rootProject.projectDir}/libraries.gradle"
	apply from: "${rootProject.projectDir}/projects.gradle"

    def customMavenRepoURL4plugins = System.getenv('CUST_MVN_URL_PLUGINS')
    if (customMavenRepoURL4plugins!=null){
        repositories {
            maven { url "${customMavenRepoURL4plugins}" } // e.g. a corporate nexus or artifactory...
        }
    }else{
    	repositories {
    	     mavenCentral()
    		 jcenter()
    	}
    }

	dependencies{
		classpath gradleApi()
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${libraryVersion.springBoot}"
//        classpath "org.asciidoctor:asciidoctor-gradle-plugin:2.4.0"
//		classpath "org.asciidoctor:asciidoctorj-diagram:1.5.4.1"
//		classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16"
		classpath "org.ajoberstar.grgit:grgit-gradle:4.0.1" // necessary for version calculation
		classpath "com.epages:restdocs-api-spec-gradle-plugin:${libraryVersion.restDocsApiSpec}"

	}
}
plugins {
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
    id 'org.asciidoctor.jvm.pdf' version '3.1.0'
}

ext {
    git = org.ajoberstar.grgit.Grgit.open(currentDir: project.rootDir) // necessary for version calculation
}

/* own clean task - we need this because root project has not included a module providing the task */
task myClean(type: Delete){
    def rootBuildFolder = file("${project.projectDir}/build")
    if (! rootBuildFolder.exists()){
        rootBuildFolder.mkdirs();
    } 
    delete rootBuildFolder.listFiles() // so we do NOT clear buildSrc/build here!
}

tasks.clean.dependsOn.myClean

allprojects {

    def customMavenRepoURL = System.getenv('CUST_MVN_URL')
    if (customMavenRepoURL!=null){
        repositories {
            maven { url "${customMavenRepoURL}" } // e.g. a corporate nexus or artifactory...
        }
    }else{
        repositories {
             mavenCentral()
             jcenter()
        }
    }

}
apply from: "${rootProject.projectDir}/build-versioning.gradle"
apply from: "${rootProject.projectDir}/build-java.gradle"
apply from: "${rootProject.projectDir}/build-spring.gradle"
apply from: "${rootProject.projectDir}/build-maven.gradle"
apply from: "${rootProject.projectDir}/build-eclipse.gradle"
apply from: "${rootProject.projectDir}/build-report.gradle"
