// SPDX-License-Identifier: MIT
apply plugin: 'org.asciidoctor.convert'

dependencies {
    compile 'org.reflections:reflections:0.9.11'
    compile project(':sechub-server') // we want to expect server and all dependencies for documentation
    testCompile project(':sechub-shared-kernel-testframework')

    /* next parts are necessary for rest doc generation in conjunction
       with reflection annoation scanning done wiht @UsecaseRestDoc
       the tests with restdoc are settled inside sechub-doc to have
       abbility to get inside gradle access to tests (each gradle project
       has normally only access to its own test classes... )*/
    testCompile project(':sechub-testframework')
    testCompile(library.springframework_restdocs)
    testCompile(library.springframework_security_test)
}

task generateAsciidoc(type: JavaExec, dependsOn: 'test') {
    main = 'com.daimler.sechub.docgen.AsciidocGenerator'
    args = ["${project.projectDir}/src/docs/asciidoc/documents/gen"]
    group = 'sechub'
    description = 'Starts asciidoc generator. Will generate planuml files and more'
    classpath = sourceSets.test.runtimeClasspath
}

asciidoctorj {
    // we do not want to have jcenter() added per default!
    // see http://asciidoctor.org/docs/asciidoctor-gradle-plugin/
    noDefaultRepositories = true

    version = '1.5.6'

}

asciidoctor.doFirst {
    // pre-process
    copy {
        /* Why do we do this here ? Because PDF converter does read the images
         * before the standard copy part from the gradle plugin for asciidoctor is done
         * so generated images - e.g. plantuml are not available at pdf render time
         * so this is ugly but necessary. We use target images folder because the images
         * dir is referenced by the html5 output directly - so it works at html5 and pdf
         * (unfortunately html has absolute pathes... so after asciidoc generation we need a fix
         * on location where html output must use relative pathes - e.g. website project ...)
         */

        from file('src/docs/asciidoc/images')
        into file("$buildDir/asciidoc/images")
        include '*.*'
    }

    copy {
        from file('src/docs/asciidoc/diagrams')
        into file("$buildDir/asciidoc/diagrams")
        include '*.*'
    }
}

asciidoctor {

    separateOutputDirs = false

    backends "html5", "pdf"
    attributes 'build-gradle': file('build.gradle'),
            'source-highlighter': 'coderay',
            'toc': 'left',
            'toclevels': '5',
            'icons': 'font',
            'setanchors': 'true',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': 'true',
            'sectnums': 'true',
            'sectnumlevels': '5',
            'version': rootProject.version

    requires = ['asciidoctor-diagram']

    /* has to be defined inside this build script again, because
       asciidoctor pdf seems to have an problem with relational path
       definitions...*/

    attributes \
        'sourcedir': file('src/docs'),
        'imagesdir': "$buildDir/asciidoc/images"

    sources {
        include 'sechub-techdoc.adoc',
        'sechub-architecture.adoc',
        'sechub-client.adoc',
        'sechub-restapi.adoc'
    }

    // workaround to enable missing includes checking. See https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/154
    ext.capturedOutput = [ ]
    def listener = { ext.capturedOutput << it } as StandardOutputListener

    logging.addStandardErrorListener(listener)
    logging.addStandardOutputListener(listener)

    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        ext.capturedOutput.join('').with { output ->
            if (output =~ /include file not found:/) {
                throw new RuntimeException("Include file(s) not found, see next lines for details:\n" + output)
            }
        }
    }


}


/* collector task for all documentation parts */
task documentation(){
     group 'sechub'
     description 'This will generate and build asciidoctor documentation '

     dependsOn 'generateAsciidoc'
     dependsOn 'asciidoctor'

     // see https://stackoverflow.com/questions/32907275/gradle-custom-task-which-runs-multiple-tasks
     tasks.findByName('asciidoctor').mustRunAfter 'generateAsciidoc'
}

task convertSecHubPages(type: Copy){

     /* Albert: Why those replace pattern stuff ?
      * Because of PDF problems with rendered images, we were forced to use absolute image pathes so
      * PDF documented has got content inside (see build.gradle in sechub-doc for info)
      *
      * But here we do NOT want absolute pathes... we want a normal website with relative ones.
      * I really tried to fix this by configuring asciidoctor plugin, but failed... either it worked for pdf or for html
      * but not for both. No matter if using newest gradle plugin, newer asciidoc-pdf etc. etc.
      *
      * So this is a workaround - we render with absolute pathes. so getting correct pdf. For html files used here on website
      * the absolute pathes are converted back to relative ones. Simplest way to provide this.
      */
     def originAbsPath = "${rootProject.projectDir}/sechub-doc/build/asciidoc"
     println "originAbsPath=$originAbsPath"
     def replacePattern = originAbsPath.replaceAll("\\\\", "/")
     if (! replacePattern.endsWith("/")){
        replacePattern+="/"
     }
     println "replacePattern=$replacePattern"

     /* fix html only */
     from("${originAbsPath}") {
         include '**/*.html'
         // remove absolute path...
         filter { line -> line.replaceAll("${replacePattern}", '') }
     }
     into 'build/sechubpages'

     includeEmptyDirs = false
}

def sechubPagesTargetBaseFolder = "${rootProject.projectDir}/docs/latest"

task docToPages(type: Copy){
     group 'sechub'
     description 'This will copy current documentation into sechub pages under /docs '

     dependsOn 'convertSecHubPages'


     into sechubPagesTargetBaseFolder
     from ("${rootProject.projectDir}/sechub-doc/build/sechubpages/"){
        include '*.html'
     }

     into ("images") {
         from ("${rootProject.projectDir}/sechub-doc/build/asciidoc/images") {
            exclude '**/*.md', '**/*.xml'
         }
     }

}

task "documentation-with-pages" {
     group 'sechub'
     description 'This will create documentation and setup sechub pages under /docs '

     dependsOn 'documentation'
     dependsOn 'docToPages'

     // see https://stackoverflow.com/questions/32907275/gradle-custom-task-which-runs-multiple-tasks
     tasks.findByName('docToPages').mustRunAfter 'documentation'
}
