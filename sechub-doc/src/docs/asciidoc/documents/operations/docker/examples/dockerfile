# +++++++++++++++++++++++++++++++++++++++++++++++++
# Example for a Dockerfile-template for sechub
# +++++++++++++++++++++++++++++++++++++++++++++++++

# We use always latest stable jre alpine base image.
# This includes, that we have always to check the
# container inside a DEV or INT environment before
# running inside PROD!
# Latest means NOT latest stable...
FROM dockerregistry.example.com/base-images/openjdk:8-jre-alpine-latest-stable

VOLUME /tmp

# start application with javarun-user (technial user...)
# java.security.edg necessary for optimized random space -> otherwise start is slow because of entropy scanning etc.
# see run.sh for defails
ENTRYPOINT [ "/home/javarun/run.sh" ]

# copy build parts to javarun-user (technial user...) home...
ADD build/docker-dependencies/sechub-server-{{ .SECHUB_SERVER_VERSION }}.jar /home/javarun/app.jar

# add always sechub server certificate into container.
# we use always user home directory of user creating this container
# at jenkins this is /var/lib/jenkins !
#
# Only prod environment in kubernetes will set spring server location etc. by
# this values
ADD build/docker-dependencies/sechub.example.com.p12 /home/javarun/sechub.example.com.p12

# Important:
# ----------
# We add this as last docker layer. Reason: sometimes we want change the call
# done in run.sh (maybe for optimization) or just the unix permissions for script.
# The big load is the jar before - so we do not want to
# upload the jar layer all time ...
ADD build/resources/main/run.sh /home/javarun/run.sh