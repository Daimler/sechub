{
    "jobUUID": "e945fd4b-384e-47ed-b608-dfe805605dd5",
    "result": {
        "count": 0,
        "findings": [
            {
                "id": 1,
                "description": "",
                "hostnames": [
                ],
                "name": "Absolute Path Traversal",
                "references": [
                ],
                "severity": "MEDIUM",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 28,
                    "column": 35,
                    "source": "\tpublic static void main(String[] args) throws Exception {",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 33,
                        "column": 17,
                        "source": "\t\tString path = args[0];",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\tString path = args[0];",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                "line": 34,
                                "column": 38,
                                "source": "\t\tFile documentsGenFolder = new File(path);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                    "line": 34,
                                    "column": 29,
                                    "source": "\t\tFile documentsGenFolder = new File(path);"
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 2,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 271,
                    "column": 23,
                    "source": "\t\tFile secHubServer = new File(\"./sechub-server\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 271,
                        "column": 8,
                        "source": "\t\tFile secHubServer = new File(\"./sechub-server\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 272,
                            "column": 8,
                            "source": "\t\tif (!secHubServer.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 276,
                                "column": 23,
                                "source": "\t\treturn assertExists(secHubServer);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 283,
                                    "column": 33,
                                    "source": "\tprivate File assertExists(File folder) {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 284,
                                        "column": 8,
                                        "source": "\t\tif (!folder.exists()) {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 287,
                                            "column": 10,
                                            "source": "\t\treturn folder;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 276,
                                                "column": 22,
                                                "source": "\t\treturn assertExists(secHubServer);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 280,
                                                    "column": 56,
                                                    "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 283,
                                                        "column": 33,
                                                        "source": "\tprivate File assertExists(File folder) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 284,
                                                            "column": 8,
                                                            "source": "\t\tif (!folder.exists()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 287,
                                                                "column": 10,
                                                                "source": "\t\treturn folder;",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 280,
                                                                    "column": 22,
                                                                    "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 263,
                                                                        "column": 54,
                                                                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 283,
                                                                            "column": 33,
                                                                            "source": "\tprivate File assertExists(File folder) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                "line": 284,
                                                                                "column": 8,
                                                                                "source": "\t\tif (!folder.exists()) {",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                    "line": 287,
                                                                                    "column": 10,
                                                                                    "source": "\t\treturn folder;",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                        "line": 263,
                                                                                        "column": 22,
                                                                                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                            "line": 154,
                                                                                            "column": 51,
                                                                                            "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                "line": 154,
                                                                                                "column": 8,
                                                                                                "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                    "line": 156,
                                                                                                    "column": 29,
                                                                                                    "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                        "line": 156,
                                                                                                        "column": 8,
                                                                                                        "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                            "line": 157,
                                                                                                            "column": 8,
                                                                                                            "source": "\t\tif (!envFolder.exists()) {",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                "line": 161,
                                                                                                                "column": 10,
                                                                                                                "source": "\t\treturn envFolder;",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                    "line": 149,
                                                                                                                    "column": 35,
                                                                                                                    "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                        "line": 149,
                                                                                                                        "column": 8,
                                                                                                                        "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                            "line": 150,
                                                                                                                            "column": 43,
                                                                                                                            "source": "\t\tcreateSecretShellScriptAndFiles(result, envFolder, e);",
                                                                                                                            "calls": {
                                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                "line": 164,
                                                                                                                                "column": 76,
                                                                                                                                "source": "\tprivate void createSecretShellScriptAndFiles(KubernetesFiles result, File targetFolder, KubernetesEnvironment e)",
                                                                                                                                "calls": {
                                                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                    "line": 192,
                                                                                                                                    "column": 22,
                                                                                                                                    "source": "\t\t\t\tensureSecretFile(targetFolder, fileName);",
                                                                                                                                    "calls": {
                                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                        "line": 249,
                                                                                                                                        "column": 37,
                                                                                                                                        "source": "\tprivate void ensureSecretFile(File targetFolder, String fileName) throws IOException {",
                                                                                                                                        "calls": {
                                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                            "line": 250,
                                                                                                                                            "column": 30,
                                                                                                                                            "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                                                                                            "calls": {
                                                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                "line": 250,
                                                                                                                                                "column": 8,
                                                                                                                                                "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                                                                                                "calls": {
                                                                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                    "line": 251,
                                                                                                                                                    "column": 8,
                                                                                                                                                    "source": "\t\tif (!secretFile.exists()) {",
                                                                                                                                                    "calls": {
                                                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                        "line": 252,
                                                                                                                                                        "column": 9,
                                                                                                                                                        "source": "\t\t\tif (!secretFile.createNewFile()) {",
                                                                                                                                                        "calls": {
                                                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                            "line": 252,
                                                                                                                                                            "column": 33,
                                                                                                                                                            "source": "\t\t\tif (!secretFile.createNewFile()) {"
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 3,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 271,
                    "column": 23,
                    "source": "\t\tFile secHubServer = new File(\"./sechub-server\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 271,
                        "column": 8,
                        "source": "\t\tFile secHubServer = new File(\"./sechub-server\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 272,
                            "column": 8,
                            "source": "\t\tif (!secHubServer.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 276,
                                "column": 23,
                                "source": "\t\treturn assertExists(secHubServer);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 283,
                                    "column": 33,
                                    "source": "\tprivate File assertExists(File folder) {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 284,
                                        "column": 8,
                                        "source": "\t\tif (!folder.exists()) {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 287,
                                            "column": 10,
                                            "source": "\t\treturn folder;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 276,
                                                "column": 22,
                                                "source": "\t\treturn assertExists(secHubServer);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 280,
                                                    "column": 56,
                                                    "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 283,
                                                        "column": 33,
                                                        "source": "\tprivate File assertExists(File folder) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 284,
                                                            "column": 8,
                                                            "source": "\t\tif (!folder.exists()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 287,
                                                                "column": 10,
                                                                "source": "\t\treturn folder;",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 280,
                                                                    "column": 22,
                                                                    "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 267,
                                                                        "column": 54,
                                                                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 283,
                                                                            "column": 33,
                                                                            "source": "\tprivate File assertExists(File folder) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                "line": 284,
                                                                                "column": 8,
                                                                                "source": "\t\tif (!folder.exists()) {",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                    "line": 287,
                                                                                    "column": 10,
                                                                                    "source": "\t\treturn folder;",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                        "line": 267,
                                                                                        "column": 22,
                                                                                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                            "line": 59,
                                                                                            "column": 72,
                                                                                            "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                "line": 59,
                                                                                                "column": 8,
                                                                                                "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                    "line": 61,
                                                                                                    "column": 15,
                                                                                                    "source": "\t\twriter.save(generatedDeploymentFilePart, result.serverDeploymentYaml);",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                        "line": 15,
                                                                                                        "column": 24,
                                                                                                        "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                            "line": 16,
                                                                                                            "column": 8,
                                                                                                            "source": "\t\tsave(targetFile,text,true);",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                "line": 18,
                                                                                                                "column": 24,
                                                                                                                "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                    "line": 22,
                                                                                                                    "column": 7,
                                                                                                                    "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                        "line": 29,
                                                                                                                        "column": 8,
                                                                                                                        "source": "\t\tif (!targetFile.exists()) {",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                            "line": 30,
                                                                                                                            "column": 22,
                                                                                                                            "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                                                                            "calls": {
                                                                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                                "line": 34,
                                                                                                                                "column": 9,
                                                                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                                                                                "calls": {
                                                                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                                    "line": 34,
                                                                                                                                    "column": 33,
                                                                                                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 4,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 274,
                    "column": 19,
                    "source": "\t\t\tsecHubServer = new File(\"./../sechub-server\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 274,
                        "column": 4,
                        "source": "\t\t\tsecHubServer = new File(\"./../sechub-server\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 276,
                            "column": 23,
                            "source": "\t\treturn assertExists(secHubServer);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 283,
                                "column": 33,
                                "source": "\tprivate File assertExists(File folder) {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 284,
                                    "column": 8,
                                    "source": "\t\tif (!folder.exists()) {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 287,
                                        "column": 10,
                                        "source": "\t\treturn folder;",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 276,
                                            "column": 22,
                                            "source": "\t\treturn assertExists(secHubServer);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 280,
                                                "column": 56,
                                                "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 283,
                                                    "column": 33,
                                                    "source": "\tprivate File assertExists(File folder) {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 284,
                                                        "column": 8,
                                                        "source": "\t\tif (!folder.exists()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 287,
                                                            "column": 10,
                                                            "source": "\t\treturn folder;",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 280,
                                                                "column": 22,
                                                                "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 263,
                                                                    "column": 54,
                                                                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 283,
                                                                        "column": 33,
                                                                        "source": "\tprivate File assertExists(File folder) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 284,
                                                                            "column": 8,
                                                                            "source": "\t\tif (!folder.exists()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                "line": 287,
                                                                                "column": 10,
                                                                                "source": "\t\treturn folder;",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                    "line": 263,
                                                                                    "column": 22,
                                                                                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                        "line": 154,
                                                                                        "column": 51,
                                                                                        "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                            "line": 154,
                                                                                            "column": 8,
                                                                                            "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                "line": 156,
                                                                                                "column": 29,
                                                                                                "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                    "line": 156,
                                                                                                    "column": 8,
                                                                                                    "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                        "line": 157,
                                                                                                        "column": 8,
                                                                                                        "source": "\t\tif (!envFolder.exists()) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                            "line": 161,
                                                                                                            "column": 10,
                                                                                                            "source": "\t\treturn envFolder;",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                "line": 149,
                                                                                                                "column": 35,
                                                                                                                "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                    "line": 149,
                                                                                                                    "column": 8,
                                                                                                                    "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                        "line": 150,
                                                                                                                        "column": 43,
                                                                                                                        "source": "\t\tcreateSecretShellScriptAndFiles(result, envFolder, e);",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                            "line": 164,
                                                                                                                            "column": 76,
                                                                                                                            "source": "\tprivate void createSecretShellScriptAndFiles(KubernetesFiles result, File targetFolder, KubernetesEnvironment e)",
                                                                                                                            "calls": {
                                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                "line": 192,
                                                                                                                                "column": 22,
                                                                                                                                "source": "\t\t\t\tensureSecretFile(targetFolder, fileName);",
                                                                                                                                "calls": {
                                                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                    "line": 249,
                                                                                                                                    "column": 37,
                                                                                                                                    "source": "\tprivate void ensureSecretFile(File targetFolder, String fileName) throws IOException {",
                                                                                                                                    "calls": {
                                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                        "line": 250,
                                                                                                                                        "column": 30,
                                                                                                                                        "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                                                                                        "calls": {
                                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                            "line": 250,
                                                                                                                                            "column": 8,
                                                                                                                                            "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                                                                                            "calls": {
                                                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                "line": 251,
                                                                                                                                                "column": 8,
                                                                                                                                                "source": "\t\tif (!secretFile.exists()) {",
                                                                                                                                                "calls": {
                                                                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                    "line": 252,
                                                                                                                                                    "column": 9,
                                                                                                                                                    "source": "\t\t\tif (!secretFile.createNewFile()) {",
                                                                                                                                                    "calls": {
                                                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                        "line": 252,
                                                                                                                                                        "column": 33,
                                                                                                                                                        "source": "\t\t\tif (!secretFile.createNewFile()) {"
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 5,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 274,
                    "column": 19,
                    "source": "\t\t\tsecHubServer = new File(\"./../sechub-server\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 274,
                        "column": 4,
                        "source": "\t\t\tsecHubServer = new File(\"./../sechub-server\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 276,
                            "column": 23,
                            "source": "\t\treturn assertExists(secHubServer);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 283,
                                "column": 33,
                                "source": "\tprivate File assertExists(File folder) {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 284,
                                    "column": 8,
                                    "source": "\t\tif (!folder.exists()) {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 287,
                                        "column": 10,
                                        "source": "\t\treturn folder;",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 276,
                                            "column": 22,
                                            "source": "\t\treturn assertExists(secHubServer);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 280,
                                                "column": 56,
                                                "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 283,
                                                    "column": 33,
                                                    "source": "\tprivate File assertExists(File folder) {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 284,
                                                        "column": 8,
                                                        "source": "\t\tif (!folder.exists()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 287,
                                                            "column": 10,
                                                            "source": "\t\treturn folder;",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 280,
                                                                "column": 22,
                                                                "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 267,
                                                                    "column": 54,
                                                                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 283,
                                                                        "column": 33,
                                                                        "source": "\tprivate File assertExists(File folder) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 284,
                                                                            "column": 8,
                                                                            "source": "\t\tif (!folder.exists()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                "line": 287,
                                                                                "column": 10,
                                                                                "source": "\t\treturn folder;",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                    "line": 267,
                                                                                    "column": 22,
                                                                                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                        "line": 59,
                                                                                        "column": 72,
                                                                                        "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                            "line": 59,
                                                                                            "column": 8,
                                                                                            "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                "line": 61,
                                                                                                "column": 15,
                                                                                                "source": "\t\twriter.save(generatedDeploymentFilePart, result.serverDeploymentYaml);",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                    "line": 15,
                                                                                                    "column": 24,
                                                                                                    "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                        "line": 16,
                                                                                                        "column": 8,
                                                                                                        "source": "\t\tsave(targetFile,text,true);",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                            "line": 18,
                                                                                                            "column": 24,
                                                                                                            "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                "line": 22,
                                                                                                                "column": 7,
                                                                                                                "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                    "line": 29,
                                                                                                                    "column": 8,
                                                                                                                    "source": "\t\tif (!targetFile.exists()) {",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                        "line": 30,
                                                                                                                        "column": 22,
                                                                                                                        "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                            "line": 34,
                                                                                                                            "column": 9,
                                                                                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                                                                            "calls": {
                                                                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                                "line": 34,
                                                                                                                                "column": 33,
                                                                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 6,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 280,
                    "column": 23,
                    "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 283,
                        "column": 33,
                        "source": "\tprivate File assertExists(File folder) {",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 284,
                            "column": 8,
                            "source": "\t\tif (!folder.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 287,
                                "column": 10,
                                "source": "\t\treturn folder;",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 280,
                                    "column": 22,
                                    "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 263,
                                        "column": 54,
                                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 283,
                                            "column": 33,
                                            "source": "\tprivate File assertExists(File folder) {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 284,
                                                "column": 8,
                                                "source": "\t\tif (!folder.exists()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 287,
                                                    "column": 10,
                                                    "source": "\t\treturn folder;",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 263,
                                                        "column": 22,
                                                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 154,
                                                            "column": 51,
                                                            "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 154,
                                                                "column": 8,
                                                                "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 156,
                                                                    "column": 29,
                                                                    "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 156,
                                                                        "column": 8,
                                                                        "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 157,
                                                                            "column": 8,
                                                                            "source": "\t\tif (!envFolder.exists()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                "line": 161,
                                                                                "column": 10,
                                                                                "source": "\t\treturn envFolder;",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                    "line": 149,
                                                                                    "column": 35,
                                                                                    "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                        "line": 149,
                                                                                        "column": 8,
                                                                                        "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                            "line": 150,
                                                                                            "column": 43,
                                                                                            "source": "\t\tcreateSecretShellScriptAndFiles(result, envFolder, e);",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                "line": 164,
                                                                                                "column": 76,
                                                                                                "source": "\tprivate void createSecretShellScriptAndFiles(KubernetesFiles result, File targetFolder, KubernetesEnvironment e)",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                    "line": 192,
                                                                                                    "column": 22,
                                                                                                    "source": "\t\t\t\tensureSecretFile(targetFolder, fileName);",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                        "line": 249,
                                                                                                        "column": 37,
                                                                                                        "source": "\tprivate void ensureSecretFile(File targetFolder, String fileName) throws IOException {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                            "line": 250,
                                                                                                            "column": 30,
                                                                                                            "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                "line": 250,
                                                                                                                "column": 8,
                                                                                                                "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                    "line": 251,
                                                                                                                    "column": 8,
                                                                                                                    "source": "\t\tif (!secretFile.exists()) {",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                        "line": 252,
                                                                                                                        "column": 9,
                                                                                                                        "source": "\t\t\tif (!secretFile.createNewFile()) {",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                            "line": 252,
                                                                                                                            "column": 33,
                                                                                                                            "source": "\t\t\tif (!secretFile.createNewFile()) {"
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 7,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 280,
                    "column": 23,
                    "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 283,
                        "column": 33,
                        "source": "\tprivate File assertExists(File folder) {",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 284,
                            "column": 8,
                            "source": "\t\tif (!folder.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 287,
                                "column": 10,
                                "source": "\t\treturn folder;",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 280,
                                    "column": 22,
                                    "source": "\t\treturn assertExists(new File(ensureSecHubServerFolder(), \"kubernetes\"));",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 267,
                                        "column": 54,
                                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 283,
                                            "column": 33,
                                            "source": "\tprivate File assertExists(File folder) {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 284,
                                                "column": 8,
                                                "source": "\t\tif (!folder.exists()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 287,
                                                    "column": 10,
                                                    "source": "\t\treturn folder;",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 267,
                                                        "column": 22,
                                                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 59,
                                                            "column": 72,
                                                            "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 59,
                                                                "column": 8,
                                                                "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 61,
                                                                    "column": 15,
                                                                    "source": "\t\twriter.save(generatedDeploymentFilePart, result.serverDeploymentYaml);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 15,
                                                                        "column": 24,
                                                                        "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                            "line": 16,
                                                                            "column": 8,
                                                                            "source": "\t\tsave(targetFile,text,true);",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                "line": 18,
                                                                                "column": 24,
                                                                                "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                    "line": 22,
                                                                                    "column": 7,
                                                                                    "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                        "line": 29,
                                                                                        "column": 8,
                                                                                        "source": "\t\tif (!targetFile.exists()) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                            "line": 30,
                                                                                            "column": 22,
                                                                                            "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                "line": 34,
                                                                                                "column": 9,
                                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                    "line": 34,
                                                                                                    "column": 33,
                                                                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 8,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 263,
                    "column": 23,
                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 283,
                        "column": 33,
                        "source": "\tprivate File assertExists(File folder) {",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 284,
                            "column": 8,
                            "source": "\t\tif (!folder.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 287,
                                "column": 10,
                                "source": "\t\treturn folder;",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 263,
                                    "column": 22,
                                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 154,
                                        "column": 51,
                                        "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 154,
                                            "column": 8,
                                            "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 156,
                                                "column": 29,
                                                "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 156,
                                                    "column": 8,
                                                    "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 157,
                                                        "column": 8,
                                                        "source": "\t\tif (!envFolder.exists()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 161,
                                                            "column": 10,
                                                            "source": "\t\treturn envFolder;",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 149,
                                                                "column": 35,
                                                                "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 149,
                                                                    "column": 8,
                                                                    "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 150,
                                                                        "column": 43,
                                                                        "source": "\t\tcreateSecretShellScriptAndFiles(result, envFolder, e);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 164,
                                                                            "column": 76,
                                                                            "source": "\tprivate void createSecretShellScriptAndFiles(KubernetesFiles result, File targetFolder, KubernetesEnvironment e)",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                "line": 192,
                                                                                "column": 22,
                                                                                "source": "\t\t\t\tensureSecretFile(targetFolder, fileName);",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                    "line": 249,
                                                                                    "column": 37,
                                                                                    "source": "\tprivate void ensureSecretFile(File targetFolder, String fileName) throws IOException {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                        "line": 250,
                                                                                        "column": 30,
                                                                                        "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                            "line": 250,
                                                                                            "column": 8,
                                                                                            "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                "line": 251,
                                                                                                "column": 8,
                                                                                                "source": "\t\tif (!secretFile.exists()) {",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                    "line": 252,
                                                                                                    "column": 9,
                                                                                                    "source": "\t\t\tif (!secretFile.createNewFile()) {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                        "line": 252,
                                                                                                        "column": 33,
                                                                                                        "source": "\t\t\tif (!secretFile.createNewFile()) {"
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 9,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 263,
                    "column": 23,
                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 283,
                        "column": 33,
                        "source": "\tprivate File assertExists(File folder) {",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 284,
                            "column": 8,
                            "source": "\t\tif (!folder.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 287,
                                "column": 10,
                                "source": "\t\treturn folder;",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 263,
                                    "column": 22,
                                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 154,
                                        "column": 51,
                                        "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 154,
                                            "column": 8,
                                            "source": "\t\tFile kubernetesSecretFolder = ensureSecretFolder();",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 156,
                                                "column": 29,
                                                "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 156,
                                                    "column": 8,
                                                    "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 157,
                                                        "column": 8,
                                                        "source": "\t\tif (!envFolder.exists()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 161,
                                                            "column": 10,
                                                            "source": "\t\treturn envFolder;",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 149,
                                                                "column": 35,
                                                                "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 149,
                                                                    "column": 8,
                                                                    "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 150,
                                                                        "column": 43,
                                                                        "source": "\t\tcreateSecretShellScriptAndFiles(result, envFolder, e);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 164,
                                                                            "column": 76,
                                                                            "source": "\tprivate void createSecretShellScriptAndFiles(KubernetesFiles result, File targetFolder, KubernetesEnvironment e)",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                "line": 218,
                                                                                "column": 30,
                                                                                "source": "\t\tFile targetFile = new File(targetFolder, createShellScriptName(\"all\"));",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                    "line": 218,
                                                                                    "column": 8,
                                                                                    "source": "\t\tFile targetFile = new File(targetFolder, createShellScriptName(\"all\"));",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                        "line": 219,
                                                                                        "column": 15,
                                                                                        "source": "\t\twriter.save(targetFile, sb.toString(), true);",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                            "line": 18,
                                                                                            "column": 24,
                                                                                            "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                "line": 22,
                                                                                                "column": 7,
                                                                                                "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                    "line": 29,
                                                                                                    "column": 8,
                                                                                                    "source": "\t\tif (!targetFile.exists()) {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                        "line": 30,
                                                                                                        "column": 22,
                                                                                                        "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                            "line": 34,
                                                                                                            "column": 9,
                                                                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                                "line": 34,
                                                                                                                "column": 33,
                                                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 10,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 156,
                    "column": 20,
                    "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 156,
                        "column": 8,
                        "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 157,
                            "column": 8,
                            "source": "\t\tif (!envFolder.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 161,
                                "column": 10,
                                "source": "\t\treturn envFolder;",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 149,
                                    "column": 35,
                                    "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 149,
                                        "column": 8,
                                        "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 150,
                                            "column": 43,
                                            "source": "\t\tcreateSecretShellScriptAndFiles(result, envFolder, e);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 164,
                                                "column": 76,
                                                "source": "\tprivate void createSecretShellScriptAndFiles(KubernetesFiles result, File targetFolder, KubernetesEnvironment e)",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 192,
                                                    "column": 22,
                                                    "source": "\t\t\t\tensureSecretFile(targetFolder, fileName);",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 249,
                                                        "column": 37,
                                                        "source": "\tprivate void ensureSecretFile(File targetFolder, String fileName) throws IOException {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 250,
                                                            "column": 30,
                                                            "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 250,
                                                                "column": 8,
                                                                "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 251,
                                                                    "column": 8,
                                                                    "source": "\t\tif (!secretFile.exists()) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 252,
                                                                        "column": 9,
                                                                        "source": "\t\t\tif (!secretFile.createNewFile()) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 252,
                                                                            "column": 33,
                                                                            "source": "\t\t\tif (!secretFile.createNewFile()) {"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 11,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 156,
                    "column": 20,
                    "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 156,
                        "column": 8,
                        "source": "\t\tFile envFolder = new File(kubernetesSecretFolder, e.folderName());",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 157,
                            "column": 8,
                            "source": "\t\tif (!envFolder.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 161,
                                "column": 10,
                                "source": "\t\treturn envFolder;",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 149,
                                    "column": 35,
                                    "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 149,
                                        "column": 8,
                                        "source": "\t\tFile envFolder = ensureEnvFolder(e);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 150,
                                            "column": 43,
                                            "source": "\t\tcreateSecretShellScriptAndFiles(result, envFolder, e);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 164,
                                                "column": 76,
                                                "source": "\tprivate void createSecretShellScriptAndFiles(KubernetesFiles result, File targetFolder, KubernetesEnvironment e)",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 218,
                                                    "column": 30,
                                                    "source": "\t\tFile targetFile = new File(targetFolder, createShellScriptName(\"all\"));",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 218,
                                                        "column": 8,
                                                        "source": "\t\tFile targetFile = new File(targetFolder, createShellScriptName(\"all\"));",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 219,
                                                            "column": 15,
                                                            "source": "\t\twriter.save(targetFile, sb.toString(), true);",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                "line": 18,
                                                                "column": 24,
                                                                "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                    "line": 22,
                                                                    "column": 7,
                                                                    "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 29,
                                                                        "column": 8,
                                                                        "source": "\t\tif (!targetFile.exists()) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                            "line": 30,
                                                                            "column": 22,
                                                                            "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                "line": 34,
                                                                                "column": 9,
                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                    "line": 34,
                                                                                    "column": 33,
                                                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 12,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 250,
                    "column": 21,
                    "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 250,
                        "column": 8,
                        "source": "\t\tFile secretFile = new File(targetFolder, fileName);",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 251,
                            "column": 8,
                            "source": "\t\tif (!secretFile.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 252,
                                "column": 9,
                                "source": "\t\t\tif (!secretFile.createNewFile()) {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 252,
                                    "column": 33,
                                    "source": "\t\t\tif (!secretFile.createNewFile()) {"
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 13,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 34,
                    "column": 29,
                    "source": "\t\tFile documentsGenFolder = new File(path);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 34,
                        "column": 8,
                        "source": "\t\tFile documentsGenFolder = new File(path);",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 35,
                            "column": 26,
                            "source": "\t\tFile documentsFolder = documentsGenFolder.getParentFile();",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                "line": 56,
                                "column": 34,
                                "source": "\t\tgenerator.generateUseCaseFiles(documentsGenFolder);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                    "line": 64,
                                    "column": 41,
                                    "source": "\tprivate void generateUseCaseFiles(File documentsGenFolder) throws IOException {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                        "line": 70,
                                        "column": 30,
                                        "source": "\t\tFile targetFile = new File(documentsGenFolder, \"gen_usecases.adoc\");",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                            "line": 70,
                                            "column": 8,
                                            "source": "\t\tFile targetFile = new File(documentsGenFolder, \"gen_usecases.adoc\");",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                                "line": 71,
                                                "column": 15,
                                                "source": "\t\twriter.save(targetFile, useCaseAsciidoc);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 15,
                                                    "column": 24,
                                                    "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 16,
                                                        "column": 8,
                                                        "source": "\t\tsave(targetFile,text,true);",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 18,
                                                            "column": 24,
                                                            "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                "line": 22,
                                                                "column": 7,
                                                                "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                    "line": 29,
                                                                    "column": 8,
                                                                    "source": "\t\tif (!targetFile.exists()) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 30,
                                                                        "column": 22,
                                                                        "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                            "line": 34,
                                                                            "column": 9,
                                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                "line": 34,
                                                                                "column": 33,
                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 14,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 100,
                    "column": 10,
                    "source": "\t\treturn new File(genFolder, \"gen_systemproperties.adoc\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 40,
                        "column": 60,
                        "source": "\t\tFile systemProperitesFile = createSystemProperyTargetFile(documentsGenFolder);",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 40,
                            "column": 8,
                            "source": "\t\tFile systemProperitesFile = createSystemProperyTargetFile(documentsGenFolder);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                "line": 48,
                                "column": 49,
                                "source": "\t\tgenerator.generateSystemPropertiesDescription(systemProperitesFile);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                    "line": 122,
                                    "column": 55,
                                    "source": "\tpublic void generateSystemPropertiesDescription(File targetFile) throws IOException {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                        "line": 124,
                                        "column": 15,
                                        "source": "\t\twriter.save(targetFile, text);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 15,
                                            "column": 24,
                                            "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 16,
                                                "column": 8,
                                                "source": "\t\tsave(targetFile,text,true);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 18,
                                                    "column": 24,
                                                    "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 22,
                                                        "column": 7,
                                                        "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 29,
                                                            "column": 8,
                                                            "source": "\t\tif (!targetFile.exists()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                "line": 30,
                                                                "column": 22,
                                                                "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                    "line": 34,
                                                                    "column": 9,
                                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 34,
                                                                        "column": 33,
                                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 15,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 96,
                    "column": 10,
                    "source": "\t\treturn new File(genFolder, \"gen_scheduling.adoc\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 41,
                        "column": 69,
                        "source": "\t\tFile scheduleDescriptionFile = createScheduleDescriptionTargetFile(documentsGenFolder);",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 41,
                            "column": 8,
                            "source": "\t\tFile scheduleDescriptionFile = createScheduleDescriptionTargetFile(documentsGenFolder);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                "line": 50,
                                "column": 41,
                                "source": "\t\tgenerator.generateScheduleDescription(scheduleDescriptionFile);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                    "line": 127,
                                    "column": 47,
                                    "source": "\tpublic void generateScheduleDescription(File targetFile) throws IOException {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                        "line": 129,
                                        "column": 15,
                                        "source": "\t\twriter.save(targetFile, text);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 15,
                                            "column": 24,
                                            "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 16,
                                                "column": 8,
                                                "source": "\t\tsave(targetFile,text,true);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 18,
                                                    "column": 24,
                                                    "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 22,
                                                        "column": 7,
                                                        "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 29,
                                                            "column": 8,
                                                            "source": "\t\tif (!targetFile.exists()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                "line": 30,
                                                                "column": 22,
                                                                "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                    "line": 34,
                                                                    "column": 9,
                                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 34,
                                                                        "column": 33,
                                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 16,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 108,
                    "column": 10,
                    "source": "\t\treturn new File(genFolder, \"gen_mockadapterproperties.adoc\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 42,
                        "column": 91,
                        "source": "\t\tFile specialMockValuePropertiesFile = createSpecialMockConfigurationPropertiesTargetFile(documentsGenFolder);",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 42,
                            "column": 8,
                            "source": "\t\tFile specialMockValuePropertiesFile = createSpecialMockConfigurationPropertiesTargetFile(documentsGenFolder);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                "line": 52,
                                "column": 47,
                                "source": "\t\tgenerator.generateMockPropertiesDescription(specialMockValuePropertiesFile);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                    "line": 132,
                                    "column": 54,
                                    "source": "\tprivate void generateMockPropertiesDescription(File targetFile) throws IOException {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                        "line": 134,
                                        "column": 15,
                                        "source": "\t\twriter.save(targetFile, text);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 15,
                                            "column": 24,
                                            "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 16,
                                                "column": 8,
                                                "source": "\t\tsave(targetFile,text,true);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 18,
                                                    "column": 24,
                                                    "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 22,
                                                        "column": 7,
                                                        "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 29,
                                                            "column": 8,
                                                            "source": "\t\tif (!targetFile.exists()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                "line": 30,
                                                                "column": 22,
                                                                "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                    "line": 34,
                                                                    "column": 9,
                                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 34,
                                                                        "column": 33,
                                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 17,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 36,
                    "column": 25,
                    "source": "\t\tFile diagramsFolder = new File(documentsFolder.getParentFile(), \"diagrams\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 36,
                        "column": 8,
                        "source": "\t\tFile diagramsFolder = new File(documentsFolder.getParentFile(), \"diagrams\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 37,
                            "column": 37,
                            "source": "\t\tFile diagramsGenFolder = new File(diagramsFolder, \"gen\");",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                "line": 37,
                                "column": 8,
                                "source": "\t\tFile diagramsGenFolder = new File(diagramsFolder, \"gen\");",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                    "line": 55,
                                    "column": 51,
                                    "source": "\t\tgenerator.generateMessagingFiles(messagingFile, diagramsGenFolder);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                        "line": 59,
                                        "column": 63,
                                        "source": "\tprivate void generateMessagingFiles(File messagingFile, File diagramsGenFolder) throws IOException {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                            "line": 61,
                                            "column": 71,
                                            "source": "\t\tdomainMessagingFilesGenerator.generateMessagingFiles(messagingFile, diagramsGenFolder, model);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                "line": 23,
                                                "column": 62,
                                                "source": "\tpublic void generateMessagingFiles(File messagingFile, File diagramsGenFolder, DomainMessagingModel model",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                    "line": 27,
                                                    "column": 33,
                                                    "source": "\t\tgenerateMessagingPlantumlFile(diagramsGenFolder, reducedModelForOverview, \"__Overview__ of domain **messaging** \",",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                        "line": 71,
                                                        "column": 50,
                                                        "source": "\tprivate void generateMessagingPlantumlFile(File diagramsGenFolder, DomainMessagingModel model, String title,",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                            "line": 74,
                                                            "column": 30,
                                                            "source": "\t\tFile targetFile = new File(diagramsGenFolder, targetFileName);",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                                "line": 74,
                                                                "column": 8,
                                                                "source": "\t\tFile targetFile = new File(diagramsGenFolder, targetFileName);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                                    "line": 75,
                                                                    "column": 15,
                                                                    "source": "\t\twriter.save(targetFile, generatedPlantuml);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 15,
                                                                        "column": 24,
                                                                        "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                            "line": 16,
                                                                            "column": 8,
                                                                            "source": "\t\tsave(targetFile,text,true);",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                "line": 18,
                                                                                "column": 24,
                                                                                "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                    "line": 22,
                                                                                    "column": 7,
                                                                                    "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                        "line": 29,
                                                                                        "column": 8,
                                                                                        "source": "\t\tif (!targetFile.exists()) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                            "line": 30,
                                                                                            "column": 22,
                                                                                            "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                "line": 34,
                                                                                                "column": 9,
                                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                                    "line": 34,
                                                                                                    "column": 33,
                                                                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 18,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 37,
                    "column": 28,
                    "source": "\t\tFile diagramsGenFolder = new File(diagramsFolder, \"gen\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 37,
                        "column": 8,
                        "source": "\t\tFile diagramsGenFolder = new File(diagramsFolder, \"gen\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 55,
                            "column": 51,
                            "source": "\t\tgenerator.generateMessagingFiles(messagingFile, diagramsGenFolder);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                "line": 59,
                                "column": 63,
                                "source": "\tprivate void generateMessagingFiles(File messagingFile, File diagramsGenFolder) throws IOException {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                    "line": 61,
                                    "column": 71,
                                    "source": "\t\tdomainMessagingFilesGenerator.generateMessagingFiles(messagingFile, diagramsGenFolder, model);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                        "line": 23,
                                        "column": 62,
                                        "source": "\tpublic void generateMessagingFiles(File messagingFile, File diagramsGenFolder, DomainMessagingModel model",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                            "line": 27,
                                            "column": 33,
                                            "source": "\t\tgenerateMessagingPlantumlFile(diagramsGenFolder, reducedModelForOverview, \"__Overview__ of domain **messaging** \",",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                "line": 71,
                                                "column": 50,
                                                "source": "\tprivate void generateMessagingPlantumlFile(File diagramsGenFolder, DomainMessagingModel model, String title,",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                    "line": 74,
                                                    "column": 30,
                                                    "source": "\t\tFile targetFile = new File(diagramsGenFolder, targetFileName);",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                        "line": 74,
                                                        "column": 8,
                                                        "source": "\t\tFile targetFile = new File(diagramsGenFolder, targetFileName);",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                            "line": 75,
                                                            "column": 15,
                                                            "source": "\t\twriter.save(targetFile, generatedPlantuml);",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                "line": 15,
                                                                "column": 24,
                                                                "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                    "line": 16,
                                                                    "column": 8,
                                                                    "source": "\t\tsave(targetFile,text,true);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 18,
                                                                        "column": 24,
                                                                        "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                            "line": 22,
                                                                            "column": 7,
                                                                            "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                "line": 29,
                                                                                "column": 8,
                                                                                "source": "\t\tif (!targetFile.exists()) {",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                    "line": 30,
                                                                                    "column": 22,
                                                                                    "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                        "line": 34,
                                                                                        "column": 9,
                                                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                            "line": 34,
                                                                                            "column": 33,
                                                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 19,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                    "line": 74,
                    "column": 21,
                    "source": "\t\tFile targetFile = new File(diagramsGenFolder, targetFileName);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                        "line": 74,
                        "column": 8,
                        "source": "\t\tFile targetFile = new File(diagramsGenFolder, targetFileName);",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                            "line": 75,
                            "column": 15,
                            "source": "\t\twriter.save(targetFile, generatedPlantuml);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                "line": 15,
                                "column": 24,
                                "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                    "line": 16,
                                    "column": 8,
                                    "source": "\t\tsave(targetFile,text,true);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                        "line": 18,
                                        "column": 24,
                                        "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 22,
                                            "column": 7,
                                            "source": "\t\tif (targetFile.exists() && overwrite) {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 29,
                                                "column": 8,
                                                "source": "\t\tif (!targetFile.exists()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 30,
                                                    "column": 22,
                                                    "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 34,
                                                        "column": 9,
                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 34,
                                                            "column": 33,
                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 20,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 104,
                    "column": 10,
                    "source": "\t\treturn new File(genFolder, \"gen_messaging.adoc\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 43,
                        "column": 49,
                        "source": "\t\tFile messagingFile = createMessagingTargetFile(documentsGenFolder);",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 43,
                            "column": 8,
                            "source": "\t\tFile messagingFile = createMessagingTargetFile(documentsGenFolder);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                "line": 55,
                                "column": 36,
                                "source": "\t\tgenerator.generateMessagingFiles(messagingFile, diagramsGenFolder);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                    "line": 59,
                                    "column": 43,
                                    "source": "\tprivate void generateMessagingFiles(File messagingFile, File diagramsGenFolder) throws IOException {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                        "line": 61,
                                        "column": 56,
                                        "source": "\t\tdomainMessagingFilesGenerator.generateMessagingFiles(messagingFile, diagramsGenFolder, model);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                            "line": 23,
                                            "column": 42,
                                            "source": "\tpublic void generateMessagingFiles(File messagingFile, File diagramsGenFolder, DomainMessagingModel model",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingFilesGenerator.java",
                                                "line": 60,
                                                "column": 15,
                                                "source": "\t\twriter.save(messagingFile, sb.toString());",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 15,
                                                    "column": 24,
                                                    "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 16,
                                                        "column": 8,
                                                        "source": "\t\tsave(targetFile,text,true);",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 18,
                                                            "column": 24,
                                                            "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                "line": 22,
                                                                "column": 7,
                                                                "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                    "line": 29,
                                                                    "column": 8,
                                                                    "source": "\t\tif (!targetFile.exists()) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 30,
                                                                        "column": 22,
                                                                        "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                            "line": 34,
                                                                            "column": 9,
                                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                "line": 34,
                                                                                "column": 33,
                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 21,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 70,
                    "column": 21,
                    "source": "\t\tFile targetFile = new File(documentsGenFolder, \"gen_usecases.adoc\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 70,
                        "column": 8,
                        "source": "\t\tFile targetFile = new File(documentsGenFolder, \"gen_usecases.adoc\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 71,
                            "column": 15,
                            "source": "\t\twriter.save(targetFile, useCaseAsciidoc);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                "line": 15,
                                "column": 24,
                                "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                    "line": 16,
                                    "column": 8,
                                    "source": "\t\tsave(targetFile,text,true);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                        "line": 18,
                                        "column": 24,
                                        "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 22,
                                            "column": 7,
                                            "source": "\t\tif (targetFile.exists() && overwrite) {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 29,
                                                "column": 8,
                                                "source": "\t\tif (!targetFile.exists()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 30,
                                                    "column": 22,
                                                    "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 34,
                                                        "column": 9,
                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 34,
                                                            "column": 33,
                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 22,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 74,
                    "column": 22,
                    "source": "\t\tFile targetFile2 = new File(documentsGenFolder, \"gen_uc_restdoc.adoc\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 74,
                        "column": 8,
                        "source": "\t\tFile targetFile2 = new File(documentsGenFolder, \"gen_uc_restdoc.adoc\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 75,
                            "column": 15,
                            "source": "\t\twriter.save(targetFile2, usecaseRestDoc);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                "line": 15,
                                "column": 24,
                                "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                    "line": 16,
                                    "column": 8,
                                    "source": "\t\tsave(targetFile,text,true);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                        "line": 18,
                                        "column": 24,
                                        "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 22,
                                            "column": 7,
                                            "source": "\t\tif (targetFile.exists() && overwrite) {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 29,
                                                "column": 8,
                                                "source": "\t\tif (!targetFile.exists()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 30,
                                                    "column": 22,
                                                    "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 34,
                                                        "column": 9,
                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 34,
                                                            "column": 33,
                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 23,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 85,
                    "column": 22,
                    "source": "\t\tFile targetFile3 = new File(documentsGenFolder, \"gen_uc_userdocumentation_restdoc.adoc\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 85,
                        "column": 8,
                        "source": "\t\tFile targetFile3 = new File(documentsGenFolder, \"gen_uc_userdocumentation_restdoc.adoc\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                            "line": 86,
                            "column": 15,
                            "source": "\t\twriter.save(targetFile3, usecaseRestDocUserDocumentation);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                "line": 15,
                                "column": 24,
                                "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                    "line": 16,
                                    "column": 8,
                                    "source": "\t\tsave(targetFile,text,true);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                        "line": 18,
                                        "column": 24,
                                        "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 22,
                                            "column": 7,
                                            "source": "\t\tif (targetFile.exists() && overwrite) {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 29,
                                                "column": 8,
                                                "source": "\t\tif (!targetFile.exists()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 30,
                                                    "column": 22,
                                                    "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 34,
                                                        "column": 9,
                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 34,
                                                            "column": 33,
                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 24,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 267,
                    "column": 23,
                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 283,
                        "column": 33,
                        "source": "\tprivate File assertExists(File folder) {",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 284,
                            "column": 8,
                            "source": "\t\tif (!folder.exists()) {",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                "line": 287,
                                "column": 10,
                                "source": "\t\treturn folder;",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                    "line": 267,
                                    "column": 22,
                                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                        "line": 59,
                                        "column": 72,
                                        "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                            "line": 59,
                                            "column": 8,
                                            "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                "line": 61,
                                                "column": 15,
                                                "source": "\t\twriter.save(generatedDeploymentFilePart, result.serverDeploymentYaml);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 15,
                                                    "column": 24,
                                                    "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 16,
                                                        "column": 8,
                                                        "source": "\t\tsave(targetFile,text,true);",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 18,
                                                            "column": 24,
                                                            "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                "line": 22,
                                                                "column": 7,
                                                                "source": "\t\tif (targetFile.exists() && overwrite) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                    "line": 29,
                                                                    "column": 8,
                                                                    "source": "\t\tif (!targetFile.exists()) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                        "line": 30,
                                                                        "column": 22,
                                                                        "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                            "line": 34,
                                                                            "column": 9,
                                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                                                "line": 34,
                                                                                "column": 33,
                                                                                "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 25,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 59,
                    "column": 38,
                    "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 59,
                        "column": 8,
                        "source": "\t\tFile generatedDeploymentFilePart = new File(ensureKubernetesGenFolder(),",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 61,
                            "column": 15,
                            "source": "\t\twriter.save(generatedDeploymentFilePart, result.serverDeploymentYaml);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                "line": 15,
                                "column": 24,
                                "source": "\tpublic void save(File targetFile, String text) throws IOException {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                    "line": 16,
                                    "column": 8,
                                    "source": "\t\tsave(targetFile,text,true);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                        "line": 18,
                                        "column": 24,
                                        "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 22,
                                            "column": 7,
                                            "source": "\t\tif (targetFile.exists() && overwrite) {",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 29,
                                                "column": 8,
                                                "source": "\t\tif (!targetFile.exists()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 30,
                                                    "column": 22,
                                                    "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                        "line": 34,
                                                        "column": 9,
                                                        "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                            "line": 34,
                                                            "column": 33,
                                                            "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 26,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 218,
                    "column": 21,
                    "source": "\t\tFile targetFile = new File(targetFolder, createShellScriptName(\"all\"));",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 218,
                        "column": 8,
                        "source": "\t\tFile targetFile = new File(targetFolder, createShellScriptName(\"all\"));",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 219,
                            "column": 15,
                            "source": "\t\twriter.save(targetFile, sb.toString(), true);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                "line": 18,
                                "column": 24,
                                "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                    "line": 22,
                                    "column": 7,
                                    "source": "\t\tif (targetFile.exists() && overwrite) {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                        "line": 29,
                                        "column": 8,
                                        "source": "\t\tif (!targetFile.exists()) {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 30,
                                            "column": 22,
                                            "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 34,
                                                "column": 9,
                                                "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 34,
                                                    "column": 33,
                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 27,
                "description": "",
                "hostnames": [
                ],
                "name": "Creation of Temp File in Dir with Incorrect Permissions",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 197,
                    "column": 22,
                    "source": "\t\t\tFile targetFile = new File(targetFolder, shellName);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 197,
                        "column": 9,
                        "source": "\t\t\tFile targetFile = new File(targetFolder, shellName);",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                            "line": 198,
                            "column": 16,
                            "source": "\t\t\twriter.save(targetFile, sb.toString(), true);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                "line": 18,
                                "column": 24,
                                "source": "\tpublic void save(File targetFile, String text, boolean overwrite) throws IOException {",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                    "line": 22,
                                    "column": 7,
                                    "source": "\t\tif (targetFile.exists() && overwrite) {",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                        "line": 29,
                                        "column": 8,
                                        "source": "\t\tif (!targetFile.exists()) {",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                            "line": 30,
                                            "column": 22,
                                            "source": "\t\t\tFile parentFile = targetFile.getParentFile();",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                "line": 34,
                                                "column": 9,
                                                "source": "\t\t\tif (!targetFile.createNewFile()) {",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                                                    "line": 34,
                                                    "column": 33,
                                                    "source": "\t\t\tif (!targetFile.createNewFile()) {"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 28,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                    "line": 28,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                        "line": 28,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                            "line": 29,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                                "line": 38,
                                                                "column": 61,
                                                                "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                    "line": 46,
                                                                    "column": 36,
                                                                    "source": "\tpublic SpringValue extract(String string) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                        "line": 51,
                                                                        "column": 23,
                                                                        "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                            "line": 51,
                                                                            "column": 35,
                                                                            "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                "line": 51,
                                                                                "column": 12,
                                                                                "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                    "line": 53,
                                                                                    "column": 22,
                                                                                    "source": "\t\tfor (String split: splitted) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                        "line": 55,
                                                                                        "column": 19,
                                                                                        "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                            "line": 55,
                                                                                            "column": 29,
                                                                                            "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                "line": 55,
                                                                                                "column": 5,
                                                                                                "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                    "line": 56,
                                                                                                    "column": 37,
                                                                                                    "source": "\t\t\t\tif (firstNotEmpty.length()>1 && firstNotEmpty.endsWith(\"}\")) {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                        "line": 56,
                                                                                                        "column": 9,
                                                                                                        "source": "\t\t\t\tif (firstNotEmpty.length()>1 && firstNotEmpty.endsWith(\"}\")) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                            "line": 67,
                                                                                                            "column": 19,
                                                                                                            "source": "\t\tint leftIndex = firstNotEmpty.indexOf(\":\");",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                "line": 67,
                                                                                                                "column": 40,
                                                                                                                "source": "\t\tint leftIndex = firstNotEmpty.indexOf(\":\");"
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 29,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 47,
                    "column": 57,
                    "source": "\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 47,
                        "column": 7,
                        "source": "\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 48,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                "line": 69,
                                "column": 59,
                                "source": "\t\t\t\tDocAnnotationData data2 = DocGeneratorUtil.buildDataBy(info2, field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                    "line": 69,
                                    "column": 23,
                                    "source": "\t\t\t\tDocAnnotationData data2 = DocGeneratorUtil.buildDataBy(info2, field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                        "line": 71,
                                        "column": 13,
                                        "source": "\t\t\t\tlist.add(data2);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                            "line": 48,
                                            "column": 5,
                                            "source": "\t\t\t\tlist.add(data0);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                                "line": 60,
                                                "column": 5,
                                                "source": "\t\t\t\tlist.add(data1);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                                    "line": 76,
                                                    "column": 10,
                                                    "source": "\t\treturn list;",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                        "line": 50,
                                                        "column": 56,
                                                        "source": "\t\treturn mockedAdaptersSprintValueDataCollector.collect();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                                            "line": 133,
                                                            "column": 106,
                                                            "source": "\t\tString text = propertiesGenerator.generate(getCollector().fetchMockAdapterSpringValueDocumentationParts());",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                "line": 24,
                                                                "column": 49,
                                                                "source": "\tpublic String generate(List<DocAnnotationData> list) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                    "line": 25,
                                                                    "column": 19,
                                                                    "source": "\t\treturn generate(list, AcceptAllSpringValueFilter.INSTANCE);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                        "line": 28,
                                                                        "column": 49,
                                                                        "source": "\tpublic String generate(List<DocAnnotationData> list, SpringValueFilter filter) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                            "line": 29,
                                                                            "column": 23,
                                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                                "line": 38,
                                                                                "column": 61,
                                                                                "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                    "line": 46,
                                                                                    "column": 36,
                                                                                    "source": "\tpublic SpringValue extract(String string) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                        "line": 51,
                                                                                        "column": 23,
                                                                                        "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                            "line": 51,
                                                                                            "column": 35,
                                                                                            "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                "line": 51,
                                                                                                "column": 12,
                                                                                                "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                    "line": 53,
                                                                                                    "column": 22,
                                                                                                    "source": "\t\tfor (String split: splitted) {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                        "line": 55,
                                                                                                        "column": 19,
                                                                                                        "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                            "line": 55,
                                                                                                            "column": 29,
                                                                                                            "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                "line": 55,
                                                                                                                "column": 5,
                                                                                                                "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                    "line": 56,
                                                                                                                    "column": 37,
                                                                                                                    "source": "\t\t\t\tif (firstNotEmpty.length()>1 && firstNotEmpty.endsWith(\"}\")) {",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                        "line": 56,
                                                                                                                        "column": 9,
                                                                                                                        "source": "\t\t\t\tif (firstNotEmpty.length()>1 && firstNotEmpty.endsWith(\"}\")) {",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                            "line": 67,
                                                                                                                            "column": 19,
                                                                                                                            "source": "\t\tint leftIndex = firstNotEmpty.indexOf(\":\");",
                                                                                                                            "calls": {
                                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                                "line": 67,
                                                                                                                                "column": 40,
                                                                                                                                "source": "\t\tint leftIndex = firstNotEmpty.indexOf(\":\");"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 30,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                    "line": 28,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                        "line": 28,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                            "line": 29,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                                "line": 38,
                                                                "column": 61,
                                                                "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                    "line": 46,
                                                                    "column": 36,
                                                                    "source": "\tpublic SpringValue extract(String string) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                        "line": 51,
                                                                        "column": 23,
                                                                        "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                            "line": 51,
                                                                            "column": 35,
                                                                            "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                "line": 51,
                                                                                "column": 12,
                                                                                "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                    "line": 53,
                                                                                    "column": 22,
                                                                                    "source": "\t\tfor (String split: splitted) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                        "line": 55,
                                                                                        "column": 19,
                                                                                        "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                            "line": 55,
                                                                                            "column": 29,
                                                                                            "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                "line": 55,
                                                                                                "column": 5,
                                                                                                "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                    "line": 56,
                                                                                                    "column": 37,
                                                                                                    "source": "\t\t\t\tif (firstNotEmpty.length()>1 && firstNotEmpty.endsWith(\"}\")) {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                        "line": 56,
                                                                                                        "column": 59,
                                                                                                        "source": "\t\t\t\tif (firstNotEmpty.length()>1 && firstNotEmpty.endsWith(\"}\")) {"
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 31,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 47,
                    "column": 57,
                    "source": "\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 47,
                        "column": 7,
                        "source": "\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 48,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                "line": 69,
                                "column": 59,
                                "source": "\t\t\t\tDocAnnotationData data2 = DocGeneratorUtil.buildDataBy(info2, field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                    "line": 69,
                                    "column": 23,
                                    "source": "\t\t\t\tDocAnnotationData data2 = DocGeneratorUtil.buildDataBy(info2, field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                        "line": 71,
                                        "column": 13,
                                        "source": "\t\t\t\tlist.add(data2);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                            "line": 48,
                                            "column": 5,
                                            "source": "\t\t\t\tlist.add(data0);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                                "line": 60,
                                                "column": 5,
                                                "source": "\t\t\t\tlist.add(data1);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                                    "line": 76,
                                                    "column": 10,
                                                    "source": "\t\treturn list;",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                        "line": 50,
                                                        "column": 56,
                                                        "source": "\t\treturn mockedAdaptersSprintValueDataCollector.collect();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                                            "line": 133,
                                                            "column": 106,
                                                            "source": "\t\tString text = propertiesGenerator.generate(getCollector().fetchMockAdapterSpringValueDocumentationParts());",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                "line": 24,
                                                                "column": 49,
                                                                "source": "\tpublic String generate(List<DocAnnotationData> list) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                    "line": 25,
                                                                    "column": 19,
                                                                    "source": "\t\treturn generate(list, AcceptAllSpringValueFilter.INSTANCE);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                        "line": 28,
                                                                        "column": 49,
                                                                        "source": "\tpublic String generate(List<DocAnnotationData> list, SpringValueFilter filter) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                            "line": 29,
                                                                            "column": 23,
                                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                                "line": 38,
                                                                                "column": 61,
                                                                                "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                    "line": 46,
                                                                                    "column": 36,
                                                                                    "source": "\tpublic SpringValue extract(String string) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                        "line": 51,
                                                                                        "column": 23,
                                                                                        "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                            "line": 51,
                                                                                            "column": 35,
                                                                                            "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                "line": 51,
                                                                                                "column": 12,
                                                                                                "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                    "line": 53,
                                                                                                    "column": 22,
                                                                                                    "source": "\t\tfor (String split: splitted) {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                        "line": 55,
                                                                                                        "column": 19,
                                                                                                        "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                            "line": 55,
                                                                                                            "column": 29,
                                                                                                            "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                "line": 55,
                                                                                                                "column": 5,
                                                                                                                "source": "\t\t\t\tfirstNotEmpty=split.trim();",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                    "line": 56,
                                                                                                                    "column": 37,
                                                                                                                    "source": "\t\t\t\tif (firstNotEmpty.length()>1 && firstNotEmpty.endsWith(\"}\")) {",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                        "line": 56,
                                                                                                                        "column": 59,
                                                                                                                        "source": "\t\t\t\tif (firstNotEmpty.length()>1 && firstNotEmpty.endsWith(\"}\")) {"
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 32,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                    "line": 28,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                        "line": 28,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                            "line": 29,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                                "line": 38,
                                                                "column": 61,
                                                                "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                    "line": 46,
                                                                    "column": 36,
                                                                    "source": "\tpublic SpringValue extract(String string) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                        "line": 51,
                                                                        "column": 23,
                                                                        "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                            "line": 51,
                                                                            "column": 35,
                                                                            "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                "line": 51,
                                                                                "column": 12,
                                                                                "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                    "line": 53,
                                                                                    "column": 22,
                                                                                    "source": "\t\tfor (String split: splitted) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                        "line": 54,
                                                                                        "column": 30,
                                                                                        "source": "\t\t\tif (! StringUtils.isEmpty(split)) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                            "line": 54,
                                                                                            "column": 29,
                                                                                            "source": "\t\t\tif (! StringUtils.isEmpty(split)) {"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 33,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 47,
                    "column": 57,
                    "source": "\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 47,
                        "column": 7,
                        "source": "\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 48,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                "line": 69,
                                "column": 59,
                                "source": "\t\t\t\tDocAnnotationData data2 = DocGeneratorUtil.buildDataBy(info2, field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                    "line": 69,
                                    "column": 23,
                                    "source": "\t\t\t\tDocAnnotationData data2 = DocGeneratorUtil.buildDataBy(info2, field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                        "line": 71,
                                        "column": 13,
                                        "source": "\t\t\t\tlist.add(data2);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                            "line": 48,
                                            "column": 5,
                                            "source": "\t\t\t\tlist.add(data0);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                                "line": 60,
                                                "column": 5,
                                                "source": "\t\t\t\tlist.add(data1);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                                    "line": 76,
                                                    "column": 10,
                                                    "source": "\t\treturn list;",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                        "line": 50,
                                                        "column": 56,
                                                        "source": "\t\treturn mockedAdaptersSprintValueDataCollector.collect();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                                            "line": 133,
                                                            "column": 106,
                                                            "source": "\t\tString text = propertiesGenerator.generate(getCollector().fetchMockAdapterSpringValueDocumentationParts());",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                "line": 24,
                                                                "column": 49,
                                                                "source": "\tpublic String generate(List<DocAnnotationData> list) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                    "line": 25,
                                                                    "column": 19,
                                                                    "source": "\t\treturn generate(list, AcceptAllSpringValueFilter.INSTANCE);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                        "line": 28,
                                                                        "column": 49,
                                                                        "source": "\tpublic String generate(List<DocAnnotationData> list, SpringValueFilter filter) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                            "line": 29,
                                                                            "column": 23,
                                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                                "line": 38,
                                                                                "column": 61,
                                                                                "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                    "line": 46,
                                                                                    "column": 36,
                                                                                    "source": "\tpublic SpringValue extract(String string) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                        "line": 51,
                                                                                        "column": 23,
                                                                                        "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                            "line": 51,
                                                                                            "column": 35,
                                                                                            "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                "line": 51,
                                                                                                "column": 12,
                                                                                                "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                    "line": 53,
                                                                                                    "column": 22,
                                                                                                    "source": "\t\tfor (String split: splitted) {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                        "line": 54,
                                                                                                        "column": 30,
                                                                                                        "source": "\t\t\tif (! StringUtils.isEmpty(split)) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                            "line": 54,
                                                                                                            "column": 29,
                                                                                                            "source": "\t\t\tif (! StringUtils.isEmpty(split)) {"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 34,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                                    "line": 123,
                                                    "column": 85,
                                                    "source": "\t\tString text = propertiesGenerator.generate(getCollector().fetchMustBeDocumentParts());",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                        "line": 24,
                                                        "column": 49,
                                                        "source": "\tpublic String generate(List<DocAnnotationData> list) {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                            "line": 25,
                                                            "column": 19,
                                                            "source": "\t\treturn generate(list, AcceptAllSpringValueFilter.INSTANCE);",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                "line": 28,
                                                                "column": 49,
                                                                "source": "\tpublic String generate(List<DocAnnotationData> list, SpringValueFilter filter) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                    "line": 29,
                                                                    "column": 23,
                                                                    "source": "\t\tif (list == null || list.isEmpty()) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                        "line": 35,
                                                                        "column": 32,
                                                                        "source": "\t\t\tif (StringUtils.isEmpty(data.springValue)) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                            "line": 35,
                                                                            "column": 27,
                                                                            "source": "\t\t\tif (StringUtils.isEmpty(data.springValue)) {"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 35,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 47,
                    "column": 57,
                    "source": "\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 47,
                        "column": 7,
                        "source": "\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 48,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                "line": 69,
                                "column": 59,
                                "source": "\t\t\t\tDocAnnotationData data2 = DocGeneratorUtil.buildDataBy(info2, field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                    "line": 69,
                                    "column": 23,
                                    "source": "\t\t\t\tDocAnnotationData data2 = DocGeneratorUtil.buildDataBy(info2, field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                        "line": 71,
                                        "column": 13,
                                        "source": "\t\t\t\tlist.add(data2);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                            "line": 48,
                                            "column": 5,
                                            "source": "\t\t\t\tlist.add(data0);",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                                "line": 60,
                                                "column": 5,
                                                "source": "\t\t\t\tlist.add(data1);",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/MockedAdaptersSpringValueDataCollector.java",
                                                    "line": 76,
                                                    "column": 10,
                                                    "source": "\t\treturn list;",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                        "line": 50,
                                                        "column": 56,
                                                        "source": "\t\treturn mockedAdaptersSprintValueDataCollector.collect();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                                                            "line": 133,
                                                            "column": 106,
                                                            "source": "\t\tString text = propertiesGenerator.generate(getCollector().fetchMockAdapterSpringValueDocumentationParts());",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                "line": 24,
                                                                "column": 49,
                                                                "source": "\tpublic String generate(List<DocAnnotationData> list) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                    "line": 25,
                                                                    "column": 19,
                                                                    "source": "\t\treturn generate(list, AcceptAllSpringValueFilter.INSTANCE);",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                        "line": 28,
                                                                        "column": 49,
                                                                        "source": "\tpublic String generate(List<DocAnnotationData> list, SpringValueFilter filter) {",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                            "line": 29,
                                                                            "column": 23,
                                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                                "line": 35,
                                                                                "column": 32,
                                                                                "source": "\t\t\tif (StringUtils.isEmpty(data.springValue)) {",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SystemPropertiesDescriptionGenerator.java",
                                                                                    "line": 35,
                                                                                    "column": 27,
                                                                                    "source": "\t\t\tif (StringUtils.isEmpty(data.springValue)) {"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 36,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 84,
                                                                                    "column": 37,
                                                                                    "source": "\t\tString cron = springScheduled.cron();",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 84,
                                                                                        "column": 10,
                                                                                        "source": "\t\tString cron = springScheduled.cron();",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 87,
                                                                                            "column": 32,
                                                                                            "source": "\t\t\tresult.scheduleDefinition = cron;",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 87,
                                                                                                "column": 10,
                                                                                                "source": "\t\t\tresult.scheduleDefinition = cron;",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 88,
                                                                                                    "column": 11,
                                                                                                    "source": "\t\t\treturn result;",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 66,
                                                                                                        "column": 44,
                                                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 66,
                                                                                                            "column": 18,
                                                                                                            "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                "line": 67,
                                                                                                                "column": 45,
                                                                                                                "source": "\t\tif (getValueExtractor().isSpringValue(data.scheduleDefinition)) {",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                    "line": 81,
                                                                                                                    "column": 38,
                                                                                                                    "source": "\tpublic boolean isSpringValue(String string) {",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                        "line": 85,
                                                                                                                        "column": 38,
                                                                                                                        "source": "\t\treturn (string.startsWith(\"${\") && string.endsWith(\"}\"));",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                            "line": 85,
                                                                                                                            "column": 11,
                                                                                                                            "source": "\t\treturn (string.startsWith(\"${\") && string.endsWith(\"}\"));",
                                                                                                                            "calls": {
                                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                                "line": 85,
                                                                                                                                "column": 28,
                                                                                                                                "source": "\t\treturn (string.startsWith(\"${\") && string.endsWith(\"}\"));"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 37,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 84,
                                                                                    "column": 37,
                                                                                    "source": "\t\tString cron = springScheduled.cron();",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 84,
                                                                                        "column": 10,
                                                                                        "source": "\t\tString cron = springScheduled.cron();",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 87,
                                                                                            "column": 32,
                                                                                            "source": "\t\t\tresult.scheduleDefinition = cron;",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 87,
                                                                                                "column": 10,
                                                                                                "source": "\t\t\tresult.scheduleDefinition = cron;",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 88,
                                                                                                    "column": 11,
                                                                                                    "source": "\t\t\treturn result;",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 66,
                                                                                                        "column": 44,
                                                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 66,
                                                                                                            "column": 18,
                                                                                                            "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                "line": 67,
                                                                                                                "column": 45,
                                                                                                                "source": "\t\tif (getValueExtractor().isSpringValue(data.scheduleDefinition)) {",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                    "line": 81,
                                                                                                                    "column": 38,
                                                                                                                    "source": "\tpublic boolean isSpringValue(String string) {",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                        "line": 85,
                                                                                                                        "column": 38,
                                                                                                                        "source": "\t\treturn (string.startsWith(\"${\") && string.endsWith(\"}\"));",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                            "line": 85,
                                                                                                                            "column": 53,
                                                                                                                            "source": "\t\treturn (string.startsWith(\"${\") && string.endsWith(\"}\"));"
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 38,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 84,
                                                                                    "column": 37,
                                                                                    "source": "\t\tString cron = springScheduled.cron();",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 84,
                                                                                        "column": 10,
                                                                                        "source": "\t\tString cron = springScheduled.cron();",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 87,
                                                                                            "column": 32,
                                                                                            "source": "\t\t\tresult.scheduleDefinition = cron;",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 87,
                                                                                                "column": 10,
                                                                                                "source": "\t\t\tresult.scheduleDefinition = cron;",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 88,
                                                                                                    "column": 11,
                                                                                                    "source": "\t\t\treturn result;",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 66,
                                                                                                        "column": 44,
                                                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 66,
                                                                                                            "column": 18,
                                                                                                            "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                "line": 67,
                                                                                                                "column": 45,
                                                                                                                "source": "\t\tif (getValueExtractor().isSpringValue(data.scheduleDefinition)) {",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                    "line": 81,
                                                                                                                    "column": 38,
                                                                                                                    "source": "\tpublic boolean isSpringValue(String string) {",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                        "line": 82,
                                                                                                                        "column": 27,
                                                                                                                        "source": "\t\tif (StringUtils.isEmpty(string)) {",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                            "line": 82,
                                                                                                                            "column": 26,
                                                                                                                            "source": "\t\tif (StringUtils.isEmpty(string)) {"
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 39,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 84,
                                                                                    "column": 37,
                                                                                    "source": "\t\tString cron = springScheduled.cron();",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 84,
                                                                                        "column": 10,
                                                                                        "source": "\t\tString cron = springScheduled.cron();",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 85,
                                                                                            "column": 28,
                                                                                            "source": "\t\tif (!StringUtils.isEmpty(cron)) {",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 85,
                                                                                                "column": 27,
                                                                                                "source": "\t\tif (!StringUtils.isEmpty(cron)) {"
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 40,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 96,
                                                                                    "column": 19,
                                                                                    "source": "\t\tappendFixedRate(springScheduled, sb);",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 122,
                                                                                        "column": 41,
                                                                                        "source": "\tprivate void appendFixedRate(Scheduled springScheduled, StringBuilder sb) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 123,
                                                                                            "column": 28,
                                                                                            "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 123,
                                                                                                "column": 59,
                                                                                                "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 123,
                                                                                                    "column": 10,
                                                                                                    "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 131,
                                                                                                        "column": 36,
                                                                                                        "source": "\t\t\tsb.append(\"fixed rate:\").append(fixedRateString).append(\" \");",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 131,
                                                                                                            "column": 4,
                                                                                                            "source": "\t\t\tsb.append(\"fixed rate:\").append(fixedRateString).append(\" \");",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                "line": 131,
                                                                                                                "column": 4,
                                                                                                                "source": "\t\t\tsb.append(\"fixed rate:\").append(fixedRateString).append(\" \");",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                    "line": 98,
                                                                                                                    "column": 18,
                                                                                                                    "source": "\t\tString fixed = sb.toString().trim();",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                        "line": 98,
                                                                                                                        "column": 29,
                                                                                                                        "source": "\t\tString fixed = sb.toString().trim();",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                            "line": 98,
                                                                                                                            "column": 36,
                                                                                                                            "source": "\t\tString fixed = sb.toString().trim();",
                                                                                                                            "calls": {
                                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                                "line": 98,
                                                                                                                                "column": 10,
                                                                                                                                "source": "\t\tString fixed = sb.toString().trim();",
                                                                                                                                "calls": {
                                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                                    "line": 100,
                                                                                                                                    "column": 27,
                                                                                                                                    "source": "\t\tif (StringUtils.isEmpty(fixed)) {",
                                                                                                                                    "calls": {
                                                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                                                        "line": 100,
                                                                                                                                        "column": 26,
                                                                                                                                        "source": "\t\tif (StringUtils.isEmpty(fixed)) {"
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 41,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 96,
                                                                                    "column": 19,
                                                                                    "source": "\t\tappendFixedRate(springScheduled, sb);",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 122,
                                                                                        "column": 41,
                                                                                        "source": "\tprivate void appendFixedRate(Scheduled springScheduled, StringBuilder sb) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 123,
                                                                                            "column": 28,
                                                                                            "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 123,
                                                                                                "column": 59,
                                                                                                "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 123,
                                                                                                    "column": 10,
                                                                                                    "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 130,
                                                                                                        "column": 28,
                                                                                                        "source": "\t\tif (!StringUtils.isEmpty(fixedRateString)) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 130,
                                                                                                            "column": 27,
                                                                                                            "source": "\t\tif (!StringUtils.isEmpty(fixedRateString)) {"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 42,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 96,
                                                                                    "column": 19,
                                                                                    "source": "\t\tappendFixedRate(springScheduled, sb);",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 122,
                                                                                        "column": 41,
                                                                                        "source": "\tprivate void appendFixedRate(Scheduled springScheduled, StringBuilder sb) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 123,
                                                                                            "column": 28,
                                                                                            "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 123,
                                                                                                "column": 59,
                                                                                                "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 123,
                                                                                                    "column": 10,
                                                                                                    "source": "\t\tString fixedRateString = springScheduled.fixedRateString();",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 124,
                                                                                                        "column": 27,
                                                                                                        "source": "\t\tif (StringUtils.isEmpty(fixedRateString)) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 124,
                                                                                                            "column": 26,
                                                                                                            "source": "\t\tif (StringUtils.isEmpty(fixedRateString)) {"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 43,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 95,
                                                                                    "column": 20,
                                                                                    "source": "\t\tappendFixedDelay(springScheduled, sb);",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 110,
                                                                                        "column": 42,
                                                                                        "source": "\tprivate void appendFixedDelay(Scheduled springScheduled, StringBuilder sb) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 111,
                                                                                            "column": 29,
                                                                                            "source": "\t\tString fixedDelayString = springScheduled.fixedDelayString();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 111,
                                                                                                "column": 61,
                                                                                                "source": "\t\tString fixedDelayString = springScheduled.fixedDelayString();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 111,
                                                                                                    "column": 10,
                                                                                                    "source": "\t\tString fixedDelayString = springScheduled.fixedDelayString();",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 118,
                                                                                                        "column": 28,
                                                                                                        "source": "\t\tif (!StringUtils.isEmpty(fixedDelayString)) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 118,
                                                                                                            "column": 27,
                                                                                                            "source": "\t\tif (!StringUtils.isEmpty(fixedDelayString)) {"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 44,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 95,
                                                                                    "column": 20,
                                                                                    "source": "\t\tappendFixedDelay(springScheduled, sb);",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 110,
                                                                                        "column": 42,
                                                                                        "source": "\tprivate void appendFixedDelay(Scheduled springScheduled, StringBuilder sb) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 111,
                                                                                            "column": 29,
                                                                                            "source": "\t\tString fixedDelayString = springScheduled.fixedDelayString();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 111,
                                                                                                "column": 61,
                                                                                                "source": "\t\tString fixedDelayString = springScheduled.fixedDelayString();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 111,
                                                                                                    "column": 10,
                                                                                                    "source": "\t\tString fixedDelayString = springScheduled.fixedDelayString();",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 112,
                                                                                                        "column": 27,
                                                                                                        "source": "\t\tif (StringUtils.isEmpty(fixedDelayString)) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 112,
                                                                                                            "column": 26,
                                                                                                            "source": "\t\tif (StringUtils.isEmpty(fixedDelayString)) {"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 45,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 94,
                                                                                    "column": 22,
                                                                                    "source": "\t\tappendInitialDelay(springScheduled, sb);",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 134,
                                                                                        "column": 44,
                                                                                        "source": "\tprivate void appendInitialDelay(Scheduled springScheduled, StringBuilder sb) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 135,
                                                                                            "column": 31,
                                                                                            "source": "\t\tString initialDelayString = springScheduled.initialDelayString();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 135,
                                                                                                "column": 65,
                                                                                                "source": "\t\tString initialDelayString = springScheduled.initialDelayString();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 135,
                                                                                                    "column": 10,
                                                                                                    "source": "\t\tString initialDelayString = springScheduled.initialDelayString();",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 142,
                                                                                                        "column": 28,
                                                                                                        "source": "\t\tif (!StringUtils.isEmpty(initialDelayString)) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 142,
                                                                                                            "column": 27,
                                                                                                            "source": "\t\tif (!StringUtils.isEmpty(initialDelayString)) {"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 46,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                    "line": 29,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                        "line": 29,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                            "line": 30,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/ScheduleDescriptionGenerator.java",
                                                                "line": 39,
                                                                "column": 68,
                                                                "source": "\t\t\tSpringSchedule extracted = springScheduledExtractor.extract(data.springScheduled);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                    "line": 65,
                                                                    "column": 42,
                                                                    "source": "\tpublic SpringSchedule extract(Scheduled springScheduled) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                        "line": 66,
                                                                        "column": 45,
                                                                        "source": "\t\tSpringSchedule data = extractSimpleString(springScheduled);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                            "line": 76,
                                                                            "column": 55,
                                                                            "source": "\tprivate SpringSchedule extractSimpleString(Scheduled springScheduled) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                "line": 84,
                                                                                "column": 17,
                                                                                "source": "\t\tString cron = springScheduled.cron();",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                    "line": 94,
                                                                                    "column": 22,
                                                                                    "source": "\t\tappendInitialDelay(springScheduled, sb);",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                        "line": 134,
                                                                                        "column": 44,
                                                                                        "source": "\tprivate void appendInitialDelay(Scheduled springScheduled, StringBuilder sb) {",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                            "line": 135,
                                                                                            "column": 31,
                                                                                            "source": "\t\tString initialDelayString = springScheduled.initialDelayString();",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                "line": 135,
                                                                                                "column": 65,
                                                                                                "source": "\t\tString initialDelayString = springScheduled.initialDelayString();",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                    "line": 135,
                                                                                                    "column": 10,
                                                                                                    "source": "\t\tString initialDelayString = springScheduled.initialDelayString();",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                        "line": 136,
                                                                                                        "column": 27,
                                                                                                        "source": "\t\tif (StringUtils.isEmpty(initialDelayString)) {",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringScheduleExtractor.java",
                                                                                                            "line": 136,
                                                                                                            "column": 26,
                                                                                                            "source": "\t\tif (StringUtils.isEmpty(initialDelayString)) {"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 47,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                    "line": 28,
                                                    "column": 68,
                                                    "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                        "line": 28,
                                                        "column": 27,
                                                        "source": "\t\tList<DocAnnotationData> list = collector.fetchMustBeDocumentParts();",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                            "line": 29,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                                "line": 35,
                                                                "column": 32,
                                                                "source": "\t\t\tif (StringUtils.isEmpty(data.springValue)) {",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/spring/MockPropertiesDescriptionGenerator.java",
                                                                    "line": 35,
                                                                    "column": 27,
                                                                    "source": "\t\t\tif (StringUtils.isEmpty(data.springValue)) {"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 48,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                    "line": 31,
                    "column": 58,
                    "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                        "line": 31,
                        "column": 8,
                        "source": "\t\t\tdata.scope=toCamelOne(fetchClass(element)).toLowerCase();",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/DocGeneratorUtil.java",
                            "line": 33,
                            "column": 10,
                            "source": "\t\treturn data;",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                "line": 69,
                                "column": 74,
                                "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                    "line": 69,
                                    "column": 22,
                                    "source": "\t\t\tDocAnnotationData data = DocGeneratorUtil.buildDataForMustBeDocumented(info,field);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                        "line": 71,
                                        "column": 12,
                                        "source": "\t\t\tlist.add(data);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/MustBeDocumentedDataCollector.java",
                                            "line": 74,
                                            "column": 10,
                                            "source": "\t\treturn list;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/ClasspathDataCollector.java",
                                                "line": 46,
                                                "column": 47,
                                                "source": "\t\treturn mustbeDocumentedDataCollector.collect();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                    "line": 40,
                                                    "column": 103,
                                                    "source": "\t\tnew KubernetesTemplateFilesGenerator().generate(files, new ClasspathDataCollector().fetchMustBeDocumentParts());",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                        "line": 43,
                                                        "column": 71,
                                                        "source": "\tpublic void generate(KubernetesFiles result, List<DocAnnotationData> list) throws IOException {",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                            "line": 44,
                                                            "column": 23,
                                                            "source": "\t\tif (list == null || list.isEmpty()) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                "line": 48,
                                                                "column": 3,
                                                                "source": "\t\tlist.add(newSecret(\"spring.datasource.username\", \"database\", \"Define username for database access\"));",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                    "line": 49,
                                                                    "column": 3,
                                                                    "source": "\t\tlist.add(newSecret(\"spring.datasource.password\", \"database\", \"The password for database access\"));",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                        "line": 52,
                                                                        "column": 38,
                                                                        "source": "\t\tgenerateDeploymentFilePart(result, list);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                            "line": 86,
                                                                            "column": 90,
                                                                            "source": "\tprivate void generateDeploymentFilePart(KubernetesFiles result, List<DocAnnotationData> list) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                "line": 88,
                                                                                "column": 35,
                                                                                "source": "\t\t\tgenerateDeploymentCode(result, data);",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                    "line": 111,
                                                                                    "column": 80,
                                                                                    "source": "\tprivate void generateDeploymentCode(KubernetesFiles result, DocAnnotationData data) {",
                                                                                    "calls": {
                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                        "line": 114,
                                                                                        "column": 28,
                                                                                        "source": "\t\tString inspect = findKey(data);",
                                                                                        "calls": {
                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                            "line": 231,
                                                                                            "column": 43,
                                                                                            "source": "\tprivate String findKey(DocAnnotationData data) {",
                                                                                            "calls": {
                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                "line": 233,
                                                                                                "column": 61,
                                                                                                "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                                                "calls": {
                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                    "line": 46,
                                                                                                    "column": 36,
                                                                                                    "source": "\tpublic SpringValue extract(String string) {",
                                                                                                    "calls": {
                                                                                                        "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                        "line": 51,
                                                                                                        "column": 23,
                                                                                                        "source": "\t\tString[] splitted = string.split(\"\\\\$\\\\{\");",
                                                                                                        "calls": {
                                                                                                            "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                            "line": 63,
                                                                                                            "column": 14,
                                                                                                            "source": "\t\t\tvalue.key=string;",
                                                                                                            "calls": {
                                                                                                                "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                "line": 63,
                                                                                                                "column": 9,
                                                                                                                "source": "\t\t\tvalue.key=string;",
                                                                                                                "calls": {
                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                    "line": 64,
                                                                                                                    "column": 11,
                                                                                                                    "source": "\t\t\treturn value;",
                                                                                                                    "calls": {
                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                        "line": 233,
                                                                                                                        "column": 56,
                                                                                                                        "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                                                                        "calls": {
                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                            "line": 233,
                                                                                                                            "column": 16,
                                                                                                                            "source": "\t\t\tSpringValue extracted = springValueExtractor.extract(data.springValue);",
                                                                                                                            "calls": {
                                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                "line": 235,
                                                                                                                                "column": 12,
                                                                                                                                "source": "\t\t\t\treturn extracted.getKey();",
                                                                                                                                "calls": {
                                                                                                                                    "location": "java/com/daimler/sechub/docgen/spring/SpringValueExtractor.java",
                                                                                                                                    "line": 12,
                                                                                                                                    "column": 11,
                                                                                                                                    "source": "\t\t\treturn key;",
                                                                                                                                    "calls": {
                                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                        "line": 235,
                                                                                                                                        "column": 28,
                                                                                                                                        "source": "\t\t\t\treturn extracted.getKey();",
                                                                                                                                        "calls": {
                                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                            "line": 114,
                                                                                                                                            "column": 27,
                                                                                                                                            "source": "\t\tString inspect = findKey(data);",
                                                                                                                                            "calls": {
                                                                                                                                                "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                "line": 114,
                                                                                                                                                "column": 10,
                                                                                                                                                "source": "\t\tString inspect = findKey(data);",
                                                                                                                                                "calls": {
                                                                                                                                                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                    "line": 115,
                                                                                                                                                    "column": 26,
                                                                                                                                                    "source": "\t\tif (inspect == null || inspect.isEmpty()) {",
                                                                                                                                                    "calls": {
                                                                                                                                                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                        "line": 118,
                                                                                                                                                        "column": 22,
                                                                                                                                                        "source": "\t\tString springENV = inspect.replace('.', '_').toUpperCase();",
                                                                                                                                                        "calls": {
                                                                                                                                                            "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                                                                                                                                                            "line": 118,
                                                                                                                                                            "column": 37,
                                                                                                                                                            "source": "\t\tString springENV = inspect.replace('.', '_').toUpperCase();"
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 49,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw Locale Dependent Comparison",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                    "line": 66,
                    "column": 45,
                    "source": "\t\treturn useCase.getSimpleName().toLowerCase();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                        "line": 49,
                        "column": 29,
                        "source": "\t\tsb.append(createIdentifier(useCase));",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                            "line": 49,
                            "column": 12,
                            "source": "\t\tsb.append(createIdentifier(useCase));",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                "line": 50,
                                "column": 3,
                                "source": "\t\tsb.append(\"/\");",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                    "line": 52,
                                    "column": 4,
                                    "source": "\t\t\tsb.append(UseCaseRestDoc.DEFAULT_VARIANT);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                        "line": 56,
                                        "column": 17,
                                        "source": "\t\tString path = sb.toString();",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                            "line": 56,
                                            "column": 28,
                                            "source": "\t\tString path = sb.toString();",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                                "line": 56,
                                                "column": 10,
                                                "source": "\t\tString path = sb.toString();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                                    "line": 57,
                                                    "column": 37,
                                                    "source": "\t\tif (alreadyCreatedPathes.contains(path)) {",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                                        "line": 57,
                                                        "column": 36,
                                                        "source": "\t\tif (alreadyCreatedPathes.contains(path)) {"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 50,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 30,
                    "column": 4,
                    "source": "\t\t\tthrow new IllegalArgumentException(\"call with target gen folder as first parameter only!\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 51,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 159,
                    "column": 4,
                    "source": "\t\t\tthrow new IllegalStateException(e + \" folder not found :\" + envFolder.getAbsolutePath());",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 38,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 52,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 253,
                    "column": 5,
                    "source": "\t\t\t\tthrow new IOException(\"Was not able to create secret file:\" + secretFile);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 38,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 53,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 285,
                    "column": 4,
                    "source": "\t\t\tthrow new IllegalStateException(\"folder does not exist:\" + folder.getAbsolutePath());",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 38,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 54,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelAsciiDocGenerator.java",
                    "line": 28,
                    "column": 4,
                    "source": "\t\t\tthrow new IllegalArgumentException();",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 55,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 100,
                    "column": 5,
                    "source": "\t\t\t\tthrow new IllegalStateException(\"UseCaseRestDoc annotation may only added one time to test method!\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 56,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 152,
                    "column": 3,
                    "source": "\t\tthrow new IllegalStateException(\"No restdoc found for Usecase:\"+entry.usecaseEntry.getAnnotationName()+\"\\nIt is annotated as @UseCaseRestDoc, but no restdoc files generated!\\n\"",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 57,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                    "line": 58,
                    "column": 4,
                    "source": "\t\t\tthrow new IllegalStateException(\"The path: \" + path",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 58,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 20,
                    "column": 4,
                    "source": "\t\t\tthrow new IllegalArgumentException(\"null not allowed as file!\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 38,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 59,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 20,
                    "column": 4,
                    "source": "\t\t\tthrow new IllegalArgumentException(\"null not allowed as file!\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 60,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 25,
                    "column": 5,
                    "source": "\t\t\t\tthrow new IOException(\"was not able to delete existing file:\"+targetFile);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 38,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 61,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 25,
                    "column": 5,
                    "source": "\t\t\t\tthrow new IOException(\"was not able to delete existing file:\"+targetFile);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 62,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 32,
                    "column": 5,
                    "source": "\t\t\t\tthrow new IllegalStateException(\"Not able to create folder structure for:\"+targetFile);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 38,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 63,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 32,
                    "column": 5,
                    "source": "\t\t\t\tthrow new IllegalStateException(\"Not able to create folder structure for:\"+targetFile);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 64,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 35,
                    "column": 5,
                    "source": "\t\t\t\tthrow new IllegalStateException(\"was not able to create new file:\"+targetFile);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 38,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 65,
                "description": "",
                "hostnames": [
                ],
                "name": "Uncaught Exception",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 35,
                    "column": 5,
                    "source": "\t\t\t\tthrow new IllegalStateException(\"was not able to create new file:\"+targetFile);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                        "line": 28,
                        "column": 21,
                        "source": "\tpublic static void main(String[] args) throws Exception {"
                    }
                }
            },
            {
                "id": 66,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 263,
                    "column": 58,
                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 263,
                        "column": 23,
                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"secret/\"));"
                    }
                }
            },
            {
                "id": 67,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 267,
                    "column": 58,
                    "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 267,
                        "column": 23,
                        "source": "\t\treturn assertExists(new File(ensureKubernetesFolder(), \"gen/\"));"
                    }
                }
            },
            {
                "id": 68,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 271,
                    "column": 32,
                    "source": "\t\tFile secHubServer = new File(\"./sechub-server\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 271,
                        "column": 23,
                        "source": "\t\tFile secHubServer = new File(\"./sechub-server\");"
                    }
                }
            },
            {
                "id": 69,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 274,
                    "column": 28,
                    "source": "\t\t\tsecHubServer = new File(\"./../sechub-server\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                        "line": 274,
                        "column": 19,
                        "source": "\t\t\tsecHubServer = new File(\"./../sechub-server\");"
                    }
                }
            },
            {
                "id": 70,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 33,
                    "column": 45,
                    "source": "\tpublic static final String DOCUMENTS_GEN = \"documents/gen/\";",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                        "line": 33,
                        "column": 29,
                        "source": "\tpublic static final String DOCUMENTS_GEN = \"documents/gen/\";",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                            "line": 116,
                            "column": 64,
                            "source": "\t\t\tFile projectRestDocGenFolder = scanForSpringRestDocGenFolder(restDocEntry);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                "line": 116,
                                "column": 64,
                                "source": "\t\t\tFile projectRestDocGenFolder = scanForSpringRestDocGenFolder(restDocEntry);",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                    "line": 117,
                                    "column": 65,
                                    "source": "\t\t\trestDocEntry.copiedRestDocFolder = copyToDocumentationProject(projectRestDocGenFolder, id);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                        "line": 130,
                                        "column": 65,
                                        "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                            "line": 130,
                                            "column": 23,
                                            "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 71,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 57,
                    "column": 26,
                    "source": "\t\t\trootFolder = new File(\"./..\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                        "line": 57,
                        "column": 17,
                        "source": "\t\t\trootFolder = new File(\"./..\");"
                    }
                }
            },
            {
                "id": 72,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 130,
                    "column": 44,
                    "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                        "line": 130,
                        "column": 23,
                        "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);"
                    }
                }
            },
            {
                "id": 73,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 146,
                    "column": 39,
                    "source": "\t\t\tFile expected = new File(buildDir, \"generated-snippets/\" + entry.path);",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                        "line": 146,
                        "column": 20,
                        "source": "\t\t\tFile expected = new File(buildDir, \"generated-snippets/\" + entry.path);"
                    }
                }
            },
            {
                "id": 74,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                    "line": 48,
                    "column": 13,
                    "source": "\t\tsb.append(\"/\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                        "line": 48,
                        "column": 12,
                        "source": "\t\tsb.append(\"/\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                            "line": 49,
                            "column": 3,
                            "source": "\t\tsb.append(createIdentifier(useCase));",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                "line": 50,
                                "column": 3,
                                "source": "\t\tsb.append(\"/\");",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                    "line": 52,
                                    "column": 4,
                                    "source": "\t\t\tsb.append(UseCaseRestDoc.DEFAULT_VARIANT);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                        "line": 56,
                                        "column": 17,
                                        "source": "\t\tString path = sb.toString();",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                            "line": 56,
                                            "column": 28,
                                            "source": "\t\tString path = sb.toString();",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                                "line": 56,
                                                "column": 10,
                                                "source": "\t\tString path = sb.toString();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                                    "line": 62,
                                                    "column": 10,
                                                    "source": "\t\treturn path;",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                        "line": 113,
                                                        "column": 45,
                                                        "source": "\t\t\tString id = RestDocPathFactory.createPath(useCaseClass, restDoc.variant());",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                            "line": 113,
                                                            "column": 11,
                                                            "source": "\t\t\tString id = RestDocPathFactory.createPath(useCaseClass, restDoc.variant());",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                "line": 117,
                                                                "column": 91,
                                                                "source": "\t\t\trestDocEntry.copiedRestDocFolder = copyToDocumentationProject(projectRestDocGenFolder, id);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                    "line": 129,
                                                                    "column": 79,
                                                                    "source": "\tprivate File copyToDocumentationProject(File projectRestDocGenFolder, String id) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                        "line": 130,
                                                                        "column": 81,
                                                                        "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                            "line": 130,
                                                                            "column": 23,
                                                                            "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 75,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                    "line": 48,
                    "column": 13,
                    "source": "\t\tsb.append(\"/\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                        "line": 48,
                        "column": 12,
                        "source": "\t\tsb.append(\"/\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                            "line": 49,
                            "column": 3,
                            "source": "\t\tsb.append(createIdentifier(useCase));",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                "line": 50,
                                "column": 3,
                                "source": "\t\tsb.append(\"/\");",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                    "line": 52,
                                    "column": 4,
                                    "source": "\t\t\tsb.append(UseCaseRestDoc.DEFAULT_VARIANT);",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                        "line": 56,
                                        "column": 17,
                                        "source": "\t\tString path = sb.toString();",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                            "line": 56,
                                            "column": 28,
                                            "source": "\t\tString path = sb.toString();",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                                "line": 56,
                                                "column": 10,
                                                "source": "\t\tString path = sb.toString();",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                                    "line": 62,
                                                    "column": 10,
                                                    "source": "\t\treturn path;",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                        "line": 113,
                                                        "column": 45,
                                                        "source": "\t\t\tString id = RestDocPathFactory.createPath(useCaseClass, restDoc.variant());",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                            "line": 113,
                                                            "column": 11,
                                                            "source": "\t\t\tString id = RestDocPathFactory.createPath(useCaseClass, restDoc.variant());",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                "line": 115,
                                                                "column": 24,
                                                                "source": "\t\t\trestDocEntry.path = id;",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                    "line": 115,
                                                                    "column": 16,
                                                                    "source": "\t\t\trestDocEntry.path = id;",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                        "line": 116,
                                                                        "column": 65,
                                                                        "source": "\t\t\tFile projectRestDocGenFolder = scanForSpringRestDocGenFolder(restDocEntry);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                            "line": 143,
                                                                            "column": 65,
                                                                            "source": "\tprivate File scanForSpringRestDocGenFolder(UseCaseRestDocEntry entry) {",
                                                                            "calls": {
                                                                                "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                                "line": 146,
                                                                                "column": 68,
                                                                                "source": "\t\t\tFile expected = new File(buildDir, \"generated-snippets/\" + entry.path);",
                                                                                "calls": {
                                                                                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                                    "line": 146,
                                                                                    "column": 20,
                                                                                    "source": "\t\t\tFile expected = new File(buildDir, \"generated-snippets/\" + entry.path);"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 76,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                    "line": 50,
                    "column": 13,
                    "source": "\t\tsb.append(\"/\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                        "line": 50,
                        "column": 12,
                        "source": "\t\tsb.append(\"/\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                            "line": 52,
                            "column": 4,
                            "source": "\t\t\tsb.append(UseCaseRestDoc.DEFAULT_VARIANT);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                "line": 56,
                                "column": 17,
                                "source": "\t\tString path = sb.toString();",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                    "line": 56,
                                    "column": 28,
                                    "source": "\t\tString path = sb.toString();",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                        "line": 56,
                                        "column": 10,
                                        "source": "\t\tString path = sb.toString();",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                            "line": 62,
                                            "column": 10,
                                            "source": "\t\treturn path;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                "line": 113,
                                                "column": 45,
                                                "source": "\t\t\tString id = RestDocPathFactory.createPath(useCaseClass, restDoc.variant());",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                    "line": 113,
                                                    "column": 11,
                                                    "source": "\t\t\tString id = RestDocPathFactory.createPath(useCaseClass, restDoc.variant());",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                        "line": 117,
                                                        "column": 91,
                                                        "source": "\t\t\trestDocEntry.copiedRestDocFolder = copyToDocumentationProject(projectRestDocGenFolder, id);",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                            "line": 129,
                                                            "column": 79,
                                                            "source": "\tprivate File copyToDocumentationProject(File projectRestDocGenFolder, String id) {",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                "line": 130,
                                                                "column": 81,
                                                                "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                    "line": 130,
                                                                    "column": 23,
                                                                    "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 77,
                "description": "",
                "hostnames": [
                ],
                "name": "Portability Flaw In File Separator",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                    "line": 50,
                    "column": 13,
                    "source": "\t\tsb.append(\"/\");",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                        "line": 50,
                        "column": 12,
                        "source": "\t\tsb.append(\"/\");",
                        "calls": {
                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                            "line": 52,
                            "column": 4,
                            "source": "\t\t\tsb.append(UseCaseRestDoc.DEFAULT_VARIANT);",
                            "calls": {
                                "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                "line": 56,
                                "column": 17,
                                "source": "\t\tString path = sb.toString();",
                                "calls": {
                                    "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                    "line": 56,
                                    "column": 28,
                                    "source": "\t\tString path = sb.toString();",
                                    "calls": {
                                        "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                        "line": 56,
                                        "column": 10,
                                        "source": "\t\tString path = sb.toString();",
                                        "calls": {
                                            "location": "java/com/daimler/sechub/docgen/util/RestDocPathFactory.java",
                                            "line": 62,
                                            "column": 10,
                                            "source": "\t\treturn path;",
                                            "calls": {
                                                "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                "line": 113,
                                                "column": 45,
                                                "source": "\t\t\tString id = RestDocPathFactory.createPath(useCaseClass, restDoc.variant());",
                                                "calls": {
                                                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                    "line": 113,
                                                    "column": 11,
                                                    "source": "\t\t\tString id = RestDocPathFactory.createPath(useCaseClass, restDoc.variant());",
                                                    "calls": {
                                                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                        "line": 115,
                                                        "column": 24,
                                                        "source": "\t\t\trestDocEntry.path = id;",
                                                        "calls": {
                                                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                            "line": 115,
                                                            "column": 16,
                                                            "source": "\t\t\trestDocEntry.path = id;",
                                                            "calls": {
                                                                "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                "line": 116,
                                                                "column": 65,
                                                                "source": "\t\t\tFile projectRestDocGenFolder = scanForSpringRestDocGenFolder(restDocEntry);",
                                                                "calls": {
                                                                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                    "line": 143,
                                                                    "column": 65,
                                                                    "source": "\tprivate File scanForSpringRestDocGenFolder(UseCaseRestDocEntry entry) {",
                                                                    "calls": {
                                                                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                        "line": 146,
                                                                        "column": 68,
                                                                        "source": "\t\t\tFile expected = new File(buildDir, \"generated-snippets/\" + entry.path);",
                                                                        "calls": {
                                                                            "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                                                                            "line": 146,
                                                                            "column": 20,
                                                                            "source": "\t\t\tFile expected = new File(buildDir, \"generated-snippets/\" + entry.path);"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "id": 78,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelAsciiDocGenerator.java",
                    "line": 112,
                    "column": 53,
                    "source": "\t\tFile[] files = entry.copiedRestDocFolder.listFiles();"
                }
            },
            {
                "id": 79,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 64,
                    "column": 40,
                    "source": "\t\tFile[] subDirs = rootFolder.listFiles(new FileFilter() {"
                }
            },
            {
                "id": 80,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 73,
                    "column": 44,
                    "source": "\t\t\tFile[] foundBuildDirs = subDir.listFiles(new FileFilter() {"
                }
            },
            {
                "id": 81,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 157,
                    "column": 24,
                    "source": "\t\tif (!envFolder.exists()) {"
                }
            },
            {
                "id": 82,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 272,
                    "column": 27,
                    "source": "\t\tif (!secHubServer.exists()) {"
                }
            },
            {
                "id": 83,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 284,
                    "column": 21,
                    "source": "\t\tif (!folder.exists()) {"
                }
            },
            {
                "id": 84,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 54,
                    "column": 18,
                    "source": "\t\tif (file.exists()) {"
                }
            },
            {
                "id": 85,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 60,
                    "column": 25,
                    "source": "\t\tif (!sechHubDoc.exists()) {"
                }
            },
            {
                "id": 86,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 147,
                    "column": 23,
                    "source": "\t\t\tif (expected.exists()) {"
                }
            },
            {
                "id": 87,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 77,
                    "column": 29,
                    "source": "\t\t\t\t\treturn file.isDirectory() && file.getName().equals(\"build\");"
                }
            },
            {
                "id": 88,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Exception Handling",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 68,
                    "column": 28,
                    "source": "\t\t\t\treturn file.isDirectory();"
                }
            },
            {
                "id": 89,
                "description": "",
                "hostnames": [
                ],
                "name": "Incorrect Permission Assignment For Critical Resources",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 274,
                    "column": 4,
                    "source": "\t\t\tsecHubServer = new File(\"./../sechub-server\");"
                }
            },
            {
                "id": 90,
                "description": "",
                "hostnames": [
                ],
                "name": "Incorrect Permission Assignment For Critical Resources",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 57,
                    "column": 4,
                    "source": "\t\t\trootFolder = new File(\"./..\");"
                }
            },
            {
                "id": 91,
                "description": "",
                "hostnames": [
                ],
                "name": "Incorrect Permission Assignment For Critical Resources",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/AsciidocGenerator.java",
                    "line": 34,
                    "column": 8,
                    "source": "\t\tFile documentsGenFolder = new File(path);"
                }
            },
            {
                "id": 92,
                "description": "",
                "hostnames": [
                ],
                "name": "Incorrect Permission Assignment For Critical Resources",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 271,
                    "column": 8,
                    "source": "\t\tFile secHubServer = new File(\"./sechub-server\");"
                }
            },
            {
                "id": 93,
                "description": "",
                "hostnames": [
                ],
                "name": "Incorrect Permission Assignment For Critical Resources",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelAsciiDocGenerator.java",
                    "line": 112,
                    "column": 10,
                    "source": "\t\tFile[] files = entry.copiedRestDocFolder.listFiles();"
                }
            },
            {
                "id": 94,
                "description": "",
                "hostnames": [
                ],
                "name": "Incorrect Permission Assignment For Critical Resources",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 52,
                    "column": 8,
                    "source": "\t\tFile file = new File(\"sechub-doc\");"
                }
            },
            {
                "id": 95,
                "description": "",
                "hostnames": [
                ],
                "name": "Incorrect Permission Assignment For Critical Resources",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 130,
                    "column": 8,
                    "source": "\t\tFile targetFolder = new File(sechHubDoc, \"src/docs/asciidoc/\"+DOCUMENTS_GEN + id);"
                }
            },
            {
                "id": 96,
                "description": "",
                "hostnames": [
                ],
                "name": "Incorrect Permission Assignment For Critical Resources",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 146,
                    "column": 9,
                    "source": "\t\t\tFile expected = new File(buildDir, \"generated-snippets/\" + entry.path);"
                }
            },
            {
                "id": 97,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Resource Access Authorization",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 39,
                    "column": 12,
                    "source": "\t\t\tbw.write(text);"
                }
            },
            {
                "id": 98,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Resource Access Authorization",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelAsciiDocGenerator.java",
                    "line": 112,
                    "column": 53,
                    "source": "\t\tFile[] files = entry.copiedRestDocFolder.listFiles();"
                }
            },
            {
                "id": 99,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Resource Access Authorization",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 64,
                    "column": 40,
                    "source": "\t\tFile[] subDirs = rootFolder.listFiles(new FileFilter() {"
                }
            },
            {
                "id": 100,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Resource Access Authorization",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 73,
                    "column": 44,
                    "source": "\t\t\tFile[] foundBuildDirs = subDir.listFiles(new FileFilter() {"
                }
            },
            {
                "id": 101,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Resource Access Authorization",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 252,
                    "column": 33,
                    "source": "\t\t\tif (!secretFile.createNewFile()) {"
                }
            },
            {
                "id": 102,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Resource Access Authorization",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 34,
                    "column": 33,
                    "source": "\t\t\tif (!targetFile.createNewFile()) {"
                }
            },
            {
                "id": 103,
                "description": "",
                "hostnames": [
                ],
                "name": "Improper Resource Access Authorization",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/util/TextFileWriter.java",
                    "line": 31,
                    "column": 51,
                    "source": "\t\t\tif (! parentFile.exists() && !parentFile.mkdirs()) {"
                }
            },
            {
                "id": 104,
                "description": "",
                "hostnames": [
                ],
                "name": "Private Array Returned From A Public Method",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseModel.java",
                    "line": 48,
                    "column": 26,
                    "source": "\t\tprivate UseCaseGroup[] groups;",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseModel.java",
                        "line": 60,
                        "column": 11,
                        "source": "\t\t\treturn groups;"
                    }
                }
            },
            {
                "id": 105,
                "description": "",
                "hostnames": [
                ],
                "name": "Private Array Returned From A Public Method",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseModel.java",
                    "line": 127,
                    "column": 18,
                    "source": "\t\t\tprivate int[] next;",
                    "calls": {
                        "location": "java/com/daimler/sechub/docgen/usecase/UseCaseModel.java",
                        "line": 193,
                        "column": 12,
                        "source": "\t\t\t\treturn next;"
                    }
                }
            },
            {
                "id": 106,
                "description": "",
                "hostnames": [
                ],
                "name": "Race Condition Format Flaw",
                "references": [
                ],
                "severity": "LOW",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/kubernetes/KubernetesTemplateFilesGenerator.java",
                    "line": 228,
                    "column": 27,
                    "source": "\t\treturn dateFormat.format(new Date());"
                }
            },
            {
                "id": 107,
                "description": "",
                "hostnames": [
                ],
                "name": "Insufficient Logging of Exceptions",
                "references": [
                ],
                "severity": "INFO",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/messaging/DomainMessagingModel.java",
                    "line": 125,
                    "column": 6,
                    "source": "\t\t\t} catch (Exception e) {"
                }
            },
            {
                "id": 108,
                "description": "",
                "hostnames": [
                ],
                "name": "Insufficient Logging of Exceptions",
                "references": [
                ],
                "severity": "INFO",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseModelDataCollector.java",
                    "line": 88,
                    "column": 7,
                    "source": "\t\t\t\t} catch (Exception e) {"
                }
            },
            {
                "id": 109,
                "description": "",
                "hostnames": [
                ],
                "name": "Insufficient Logging of Exceptions",
                "references": [
                ],
                "severity": "INFO",
                "code": {
                    "location": "java/com/daimler/sechub/docgen/usecase/UseCaseRestDocModelDataCollector.java",
                    "line": 137,
                    "column": 5,
                    "source": "\t\t} catch (IOException e) {"
                }
            }
        ]
    },
    "trafficLight": "YELLOW"
}
