// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject sechub-client-java
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */
 
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile library.slf4j
    compile library.jackson_core
    compile library.jackson_databind
    
    compile project(':sechub-commons-model')
    
    compile library.apache_httpcomponents_client

    testCompile library.junit
    testCompile library.mockito
    testCompile library.hamcrest
}

// see https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator-gradle-plugin/README.adoc
apply plugin: 'org.openapi.generator'

def specFilePath = "$rootDir/sechub-doc/build/api-spec/openapi3.yaml"

openApiValidate {
    inputSpec = "$specFilePath"
}

openApiGenerate {
    generatorName = "java"
    
    inputSpec = "$specFilePath"
    outputDir = "$rootDir/sechub-client-java/gen"
    apiPackage = "com.daimler.sechub.client.java.api"
    invokerPackage = "com.daimler.sechub.client.java.api"
    modelPackage = "com.daimler.sechub.client.java.api.model"
    modelFilesConstrainedTo = [
            "Error"
    ]
    globalProperties = [
            validateSpec   : "true",
            modelDocs      : "false",
            models         : "",  // generate all
            apis           : "", // generate all
            supportingFiles: ""  // generate all
    ]
    configOptions = [
            performBeanValidation: "false",
            useBeanValidation    : "false",
            java8                : "true",
            dateLibrary          : "java8",
            serializableModel    : "true",
            serializationLibrary : "jackson",
            artifactId           : rootProject.name,
            legacyDiscriminatorBehavior : "false",
            library : "jersey2",
            licenseName : "MIT",
            developerOrganization : "Daimler"
            
    ]
}

tasks.withType(org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    outputs.upToDateWhen { false }
    outputs.cacheIf { false }
}

// let's generate always java open api parts before compile:
//compileJava.dependsOn tasks.openApiGenerate

/**
 * Custom gradle task to build a "fatJar".
 */
task buildJavaClientAll(type: Jar) {
	group 'sechub'
    description 'This creates java client library jar containing all libraries.'
    baseName = 'sechub-java-client-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

sourceSets {
    main{
        java {
           srcDirs 'src/main/java-gen', 'src/main/java/'
        }

    }

}

/**
 * Create folder for genareted sources
 */
tasks.eclipse.dependsOn << {
  	String sourceFolder = "src/main/java-gen"
  	def resourceDir = new File(project.projectDir, sourceFolder)
  		
  	if( !resourceDir.exists() && ! resourceDir.mkdirs() ) {
  		logger.info("Not able to create eclipse resource dir: %1",resourceDir);
  	}
}





