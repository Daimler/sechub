/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.daimler.sechub.client.java.api;

import com.daimler.sechub.client.java.api.ApiException;
import com.daimler.sechub.client.java.api.model.ExecutionProfileCreate;
import com.daimler.sechub.client.java.api.model.ExecutionProfileFetch;
import com.daimler.sechub.client.java.api.model.ExecutionProfileUpdate;
import com.daimler.sechub.client.java.api.model.ExecutorConfiguration;
import com.daimler.sechub.client.java.api.model.ExecutorConfigurationWithUUID;
import com.daimler.sechub.client.java.api.model.ListOfExecutionProfiles;
import com.daimler.sechub.client.java.api.model.ListOfExecutorConfigurations;
import com.daimler.sechub.client.java.api.model.MappingConfiguration;
import com.daimler.sechub.client.java.api.model.Project;
import com.daimler.sechub.client.java.api.model.ProjectDetails;
import com.daimler.sechub.client.java.api.model.ProjectWhitelist;
import com.daimler.sechub.client.java.api.model.UserDetails;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Ignore
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    
    /**
     * Admin applies self registration
     *
     * In this usecase the administrator will accept the self registration done by an user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminAcceptsSignupTest() throws ApiException {
        String userId = null;
        api.adminAcceptsSignup(userId);

        // TODO: test validations
    }
    
    /**
     * Admin assigns execution profile to project
     *
     * An administrator assigns an execution profile to an existing project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminAssignsExecutionProfileToProjectTest() throws ApiException {
        String profileId = null;
        String projectId = null;
        api.adminAssignsExecutionProfileToProject(profileId, projectId);

        // TODO: test validations
    }
    
    /**
     * Admin assigns user to project
     *
     * An administrator assigns an user to an existing sechub project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminAssignsUserToProjectTest() throws ApiException {
        String userId = null;
        String projectId = null;
        api.adminAssignsUserToProject(userId, projectId);

        // TODO: test validations
    }
    
    /**
     * Admin cancels a job
     *
     * Administrator does cancel a job by its Job UUID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCancelsJobTest() throws ApiException {
        String jobUUID = null;
        api.adminCancelsJob(jobUUID);

        // TODO: test validations
    }
    
    /**
     * Admin changes owner of a project
     *
     * An administrator changes the owner of an existing sechub project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminChangesProjectOwnerTest() throws ApiException {
        String userId = null;
        String projectId = null;
        api.adminChangesProjectOwner(userId, projectId);

        // TODO: test validations
    }
    
    /**
     * Admin checks server version
     *
     * An administrator checks the current SecHub server version. Only administrators are able to check the server version, because knowing the exact server version makes it easier for penetration tester or attacker to attack the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminChecksServerVersionTest() throws ApiException {
        Object response = api.adminChecksServerVersion();

        // TODO: test validations
    }
    
    /**
     * Admin creates an execution proflie
     *
     * An administrator creates an execution profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCreatesExecutionProfileTest() throws ApiException {
        String profileId = null;
        ExecutionProfileCreate executionProfileCreate = null;
        api.adminCreatesExecutionProfile(profileId, executionProfileCreate);

        // TODO: test validations
    }
    
    /**
     * Admin creates an executor configuration
     *
     * An administrator creates an executor a new configuration entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCreatesExecutorConfigurationTest() throws ApiException {
        ExecutorConfiguration executorConfiguration = null;
        Object response = api.adminCreatesExecutorConfiguration(executorConfiguration);

        // TODO: test validations
    }
    
    /**
     * Admin creates a project
     *
     * Admin creates a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCreatesProjectTest() throws ApiException {
        Project project = null;
        api.adminCreatesProject(project);

        // TODO: test validations
    }
    
    /**
     * Admin deletes a project
     *
     * Admin deletes a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeleteProjectTest() throws ApiException {
        String projectId = null;
        api.adminDeleteProject(projectId);

        // TODO: test validations
    }
    
    /**
     * Admin deletes execution profile
     *
     * An administrator deletes execution profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeletesExecutionProfileTest() throws ApiException {
        String profileId = null;
        api.adminDeletesExecutionProfile(profileId);

        // TODO: test validations
    }
    
    /**
     * Admin deletes executor configuration
     *
     * An administrator deletes an executor by removing the configuration entry identified by its uuid
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeletesExecutorConfigurationTest() throws ApiException {
        String uuid = null;
        api.adminDeletesExecutorConfiguration(uuid);

        // TODO: test validations
    }
    
    /**
     * Admin deletes user signup
     *
     * In this usecase the administrator will not accept the self registration done by an user but delete the entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeletesSignupTest() throws ApiException {
        String userId = null;
        api.adminDeletesSignup(userId);

        // TODO: test validations
    }
    
    /**
     * Admin deletes a user
     *
     * Admin deletes a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeletesUserTest() throws ApiException {
        String userId = null;
        api.adminDeletesUser(userId);

        // TODO: test validations
    }
    
    /**
     * Admin disables job processing in scheduler
     *
     * An administrator disables scheduler job processing. This can be a preparation for system wide update - when scheduling is stoped, user can ask for new SecHub Jobs etc. But as long as scheduler is stopped nothing is executed - so JVMs/PODs can be updated in cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDisablesSchedulerJobProcessingTest() throws ApiException {
        api.adminDisablesSchedulerJobProcessing();

        // TODO: test validations
    }
    
    /**
     * Admin downloads all details about a scan job
     *
     * An administrator downloads a ZIP file containing full details of a scan. Main reason for this use case is for debugging when there are problems with security products. Another reason is for developers to adopt new security products easier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDownloadsFullScanDataForJobTest() throws ApiException {
        String jobUUID = null;
        Object response = api.adminDownloadsFullScanDataForJob(jobUUID);

        // TODO: test validations
    }
    
    /**
     * Admin enables scheduler job processing
     *
     * An administrator starts scheduler job processing. This can be a necessary step after a system wide update where processing of jobs was stoped before.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminEnablesSchedulerJobProcessingTest() throws ApiException {
        api.adminEnablesSchedulerJobProcessing();

        // TODO: test validations
    }
    
    /**
     * Admin fetches execution profile
     *
     * An administrator fetches details about an execution profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminFetchesExecutionProfileTest() throws ApiException {
        String profileId = null;
        ExecutionProfileFetch response = api.adminFetchesExecutionProfile(profileId);

        // TODO: test validations
    }
    
    /**
     * Admin fetches execution proflie list
     *
     * An administrator fetches execution profile list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminFetchesExecutionProfileListTest() throws ApiException {
        ListOfExecutionProfiles response = api.adminFetchesExecutionProfileList();

        // TODO: test validations
    }
    
    /**
     * Admin fetches executor configuration
     *
     * An administrator fetches one explicit executor configuration by its uuid.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminFetchesExecutorConfigurationTest() throws ApiException {
        String uuid = null;
        ExecutorConfigurationWithUUID response = api.adminFetchesExecutorConfiguration(uuid);

        // TODO: test validations
    }
    
    /**
     * Admin fetches executor configuration list
     *
     * An administrator fetches executor configuration list which contains all executor configurations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminFetchesExecutorConfigurationListTest() throws ApiException {
        ListOfExecutorConfigurations response = api.adminFetchesExecutorConfigurationList();

        // TODO: test validations
    }
    
    /**
     * Admin fetches mapping configuration
     *
     * An administrator fetches mapping configuration by its ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminFetchesMappingConfigurationTest() throws ApiException {
        String mappingId = null;
        MappingConfiguration response = api.adminFetchesMappingConfiguration(mappingId);

        // TODO: test validations
    }
    
    /**
     * Admin grants admin rights to user
     *
     * An administrator grants admin rights to another user. So this user will become also an administrator.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminGrantsAdminRightsToUserTest() throws ApiException {
        String userId = null;
        api.adminGrantsAdminRightsToUser(userId);

        // TODO: test validations
    }
    
    /**
     * Admin lists all admins
     *
     * An administrator downloads a json file containing all names of SecHub admins
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminListsAllAdminsTest() throws ApiException {
        List<Object> response = api.adminListsAllAdmins();

        // TODO: test validations
    }
    
    /**
     * Admin lists all projects
     *
     * An administrator downloads a json file containing all project ids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminListsAllProjectsTest() throws ApiException {
        List<Object> response = api.adminListsAllProjects();

        // TODO: test validations
    }
    
    /**
     * Admin lists all running jobs
     *
     * Admin lists all running jobs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminListsAllRunningJobsTest() throws ApiException {
        List<Object> response = api.adminListsAllRunningJobs();

        // TODO: test validations
    }
    
    /**
     * Admin lists all users
     *
     * An administrator downloads a json file containing all user ids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminListsAllUsersTest() throws ApiException {
        List<Object> response = api.adminListsAllUsers();

        // TODO: test validations
    }
    
    /**
     * Admin lists open user signups
     *
     * In this usecase the administrator will list the currently unapplied user self registrations/signups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminListsOpenUserSignupsTest() throws ApiException {
        List<Object> response = api.adminListsOpenUserSignups();

        // TODO: test validations
    }
    
    /**
     * Admin lists status information
     *
     * An administrator fetches current known status information about sechub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminListsStatusInformationTest() throws ApiException {
        List<Object> response = api.adminListsStatusInformation();

        // TODO: test validations
    }
    
    /**
     * Admin restarts a job
     *
     * Admin restarts a job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminRestartsJobTest() throws ApiException {
        String jobUUID = null;
        api.adminRestartsJob(jobUUID);

        // TODO: test validations
    }
    
    /**
     * Admin restarts a job (hard)
     *
     * Admin restarts a job (hard)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminRestartsJobHardTest() throws ApiException {
        String jobUUID = null;
        api.adminRestartsJobHard(jobUUID);

        // TODO: test validations
    }
    
    /**
     * Admin revokes admin rights from an admin
     *
     * An administrator revokes existing admin rights from another administrator.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminRevokesAdminRightsFromAdminTest() throws ApiException {
        String userId = null;
        api.adminRevokesAdminRightsFromAdmin(userId);

        // TODO: test validations
    }
    
    /**
     * Admin shows project details
     *
     * An administrator downloads a json file containing json with project details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminShowsProjectDetailsTest() throws ApiException {
        String projectId = null;
        ProjectDetails response = api.adminShowsProjectDetails(projectId);

        // TODO: test validations
    }
    
    /**
     * Admin shows scan logs for project
     *
     * An admin downloads a json file containing log for scans of project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminShowsScanLogsForProjectTest() throws ApiException {
        String projectId = null;
        List<Object> response = api.adminShowsScanLogsForProject(projectId);

        // TODO: test validations
    }
    
    /**
     * Admin shows user details
     *
     * An administrator downloads a json file containing json containing user details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminShowsUserDetailsTest() throws ApiException {
        String userId = null;
        UserDetails response = api.adminShowsUserDetails(userId);

        // TODO: test validations
    }
    
    /**
     * Admin get scheduler status
     *
     * An administrator wants to update information about scheduler status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminTriggersRefreshOfSchedulerStatusTest() throws ApiException {
        api.adminTriggersRefreshOfSchedulerStatus();

        // TODO: test validations
    }
    
    /**
     * Admin unassigns execution profile from project
     *
     * An administrator unassigns an execution profile from a projects.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminUnassignsExecutionProfileFromProjectTest() throws ApiException {
        String profileId = null;
        String projectId = null;
        api.adminUnassignsExecutionProfileFromProject(profileId, projectId);

        // TODO: test validations
    }
    
    /**
     * Admin unassigns user from project
     *
     * An administrator unassigns an user from a sechub project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminUnassignsUserFromProjectTest() throws ApiException {
        String userId = null;
        String projectId = null;
        api.adminUnassignsUserFromProject(userId, projectId);

        // TODO: test validations
    }
    
    /**
     * Admin updates execution profile
     *
     * An administrator updateds dedicated execution profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminUpdatesExecutionProfileTest() throws ApiException {
        String profileId = null;
        ExecutionProfileUpdate executionProfileUpdate = null;
        api.adminUpdatesExecutionProfile(profileId, executionProfileUpdate);

        // TODO: test validations
    }
    
    /**
     * Admin updates executor configuration setup
     *
     * An administrator updateds dedicated executor configuration. The update does change description, enabled state and also used executors, but Will NOT change any associations between profile and projects.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminUpdatesExecutorConfigTest() throws ApiException {
        String uuid = null;
        ExecutorConfiguration executorConfiguration = null;
        api.adminUpdatesExecutorConfig(uuid, executorConfiguration);

        // TODO: test validations
    }
    
    /**
     * Admin updates mapping configuration
     *
     * An administrator changes mapping configuration. Mappings represents a generic mechanism to replace a given string, matched by configured regular expression pattern with a replacement string. Some of the mappings are used for adapter behaviour.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminUpdatesMappingConfigurationTest() throws ApiException {
        String mappingId = null;
        MappingConfiguration mappingConfiguration = null;
        api.adminUpdatesMappingConfiguration(mappingId, mappingConfiguration);

        // TODO: test validations
    }
    
    /**
     * Update project metadata
     *
     * Update project metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProjectMetaDataTest() throws ApiException {
        String projectId = null;
        ProjectWhitelist projectWhitelist = null;
        api.updateProjectMetaData(projectId, projectWhitelist);

        // TODO: test validations
    }
    
    /**
     * Update project whitelist
     *
     * Update project whitelist
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProjectWhitelistTest() throws ApiException {
        String projectId = null;
        ProjectWhitelist projectWhitelist = null;
        api.updateProjectWhitelist(projectId, projectWhitelist);

        // TODO: test validations
    }
    
}
