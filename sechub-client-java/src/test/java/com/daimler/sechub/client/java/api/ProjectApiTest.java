/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.daimler.sechub.client.java.api;

import com.daimler.sechub.client.java.api.ApiException;
import com.daimler.sechub.client.java.api.model.FalsePositives;
import com.daimler.sechub.client.java.api.model.FalsePositivesForJob;
import com.daimler.sechub.client.java.api.model.JobId;
import com.daimler.sechub.client.java.api.model.JobStatus;
import com.daimler.sechub.client.java.api.model.ScanJob;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Ignore
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    
    /**
     * User approves sechub job
     *
     * User approves sechub job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userApprovesJobTest() throws ApiException {
        String projectId = null;
        String jobUUID = null;
        api.userApprovesJob(projectId, jobUUID);

        // TODO: test validations
    }
    
    /**
     * User checks sechub job state
     *
     * User checks sechub job state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userChecksJobStatusTest() throws ApiException {
        String projectId = null;
        String jobUUID = null;
        JobStatus response = api.userChecksJobStatus(projectId, jobUUID);

        // TODO: test validations
    }
    
    /**
     * User creates a new sechub job
     *
     * User creates a new sechub job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCreatesNewJobTest() throws ApiException {
        String projectId = null;
        ScanJob scanJob = null;
        JobId response = api.userCreatesNewJob(projectId, scanJob);

        // TODO: test validations
    }
    
    /**
     * User defines mock data configuration for project
     *
     * User defines mock data configuration for project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDefinesProjectMockdataTest() throws ApiException {
        String projectId = null;
        Object body = null;
        api.userDefinesProjectMockdata(projectId, body);

        // TODO: test validations
    }
    
    /**
     * User downloads sechub job report
     *
     * User downloads sechub job report
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDownloadsJobReportTest() throws ApiException {
        String projectId = null;
        String jobUUID = null;
        Object response = api.userDownloadsJobReport(projectId, jobUUID);

        // TODO: test validations
    }
    
    /**
     * User fetches false positive configuration of project
     *
     * User fetches false positive configuration of project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userFetchesFalsePositiveConfigurationOfProjectTest() throws ApiException {
        String projectId = null;
        FalsePositives response = api.userFetchesFalsePositiveConfigurationOfProject(projectId);

        // TODO: test validations
    }
    
    /**
     * User marks false positives for finished sechub job
     *
     * User marks false positives for finished sechub job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userMarksFalsePositivesForJobTest() throws ApiException {
        String projectId = null;
        FalsePositivesForJob falsePositivesForJob = null;
        api.userMarksFalsePositivesForJob(projectId, falsePositivesForJob);

        // TODO: test validations
    }
    
    /**
     * User retrieves mock data configuration for project
     *
     * User retrieves mock data configuration for project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRetrievesProjectMockdataTest() throws ApiException {
        String projectId = null;
        Object response = api.userRetrievesProjectMockdata(projectId);

        // TODO: test validations
    }
    
    /**
     * User unmarks existing false positive definitons
     *
     * User unmarks existing false positive definitons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUnmarksFalsePositivesTest() throws ApiException {
        String projectId = null;
        String jobUUID = null;
        String findingId = null;
        api.userUnmarksFalsePositives(projectId, jobUUID, findingId);

        // TODO: test validations
    }
    
    /**
     * User uploads source code
     *
     * User uploads source code
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUploadsSourceCodeTest() throws ApiException {
        String projectId = null;
        String jobUUID = null;
        String checkSum = null;
        api.userUploadsSourceCode(projectId, jobUUID, checkSum);

        // TODO: test validations
    }
    
}
